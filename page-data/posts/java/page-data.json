{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/java","result":{"pageContext":{"currentCategory":"java","categories":["All","블로그","database","server","spring","java","ci/cd","docker","web","frontend"],"edges":[{"node":{"id":"611398ab-c106-5ee5-8ae1-f0b337ba3884","excerpt":"📕 개념 ❌ 교착 상태(Deadlock) 노트북으로 코딩을 하고 싶은 두 사람 A, B(프로세스/스레드) 가 있다.\nA는 배터리가 0% 인 노트북(자원)을 가지고 있고(점유) 충전기 를 기다리고 있다(대기).\nB는 충전기(자원)를 가지고 있고(점유) 노트북을 기다리고 있다(대기). 이처럼 서로 자원을 놓아줄 생각은 없고, 자원 요청을 무한정 대기하고 있는 상태 를 말합니다. Critical section(임계 영역) 여기서 노트북과 충전기를 공유 자원이라고 부르고, 공유자원이 속해 있어 교착 상태가 발생할 수 있는 영역을 임계영역이라고 부릅니다.\n공유 데이터의 일관성을 보장하기 위해 하나의 프로세스/스레드만 진입해서 실행(상호배제)가능한 영역입니다. 교착 상태가 발생하기 위해서는 네가지 조건을 충족해야 합니다. 이중 상호배제를 중점으로 알아보려 합니다. 상호배제 점유대기 비선점 순환대기 Mutual exclusion(상호 배제) 프로세스/스레드가 필요로 하는 공유자원에 대해 배타적…","fields":{"slug":"/mutex-semaphore/"},"frontmatter":{"categories":"블로그 java","title":"뮤텍스(Mutex)와 세마포어(Semaphore)","date":"June 17, 2023"}},"next":{"fields":{"slug":"/spring-rest-docs/"}},"previous":{"fields":{"slug":"/could-not-safety-identify-store-assignment-for-repository/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}