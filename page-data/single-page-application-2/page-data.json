{"componentChunkName":"component---src-templates-blog-template-js","path":"/single-page-application-2","result":{"data":{"cur":{"id":"26d667eb-e403-5729-91e2-f7c70f6449d8","html":"<p><img src=\"https://velog.velcdn.com/images/kws60000/post/975ddce2-0d9c-44e9-aee3-683fea8cc157/image.png\" alt=\"\"></p>\n<p>안녕하세요.\n이번 게시물은 이전 게시물 [SPA - 등장 배경]의 다음 편입니다.\n이전 게시물에서는 SPA가 등장한 배경, MPA와 차이점을 소개했습니다.</p>\n<p><strong>SPA는 하나의 페이지를 서버로부터 받아와 브라우저에서 렌더링을 하며 내용을 채웁니다.</strong>\n이는 CSR과 궁합이 맞으며, 실제로 SPA + CSR로 많이 사용됩니다.\n반면 <strong>MPA는 문서에 대한 처리를 서버에서 전적으로 하므로, SSR과 궁합이 맞습니다.</strong></p>\n<p>따라서, 이번 게시물에서는 SPA/MPA 원리와 연관이 있는 CSR/SSR에 대해 소개하려 합니다.</p>\n<br />\n<h2 id=\"csrclient-side-rendering\" style=\"position:relative;\"><a href=\"#csrclient-side-rendering\" aria-label=\"csrclient side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>﻿CSR(Client Side Rendering)</h2>\n<ol>\n<li>클라이언트에서 렌더링을 하는 것</li>\n<li>클라이언트는 빈 껍데기의 index.html을 받고, 추가로 서버로부터 js 파일을 다운로드합니다.</li>\n<li>추가로 필요한 데이터는 서버에 요청해서 데이터를 받은 다음에 동적으로 html을 생성합니다.</li>\n</ol>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>페이지를 전환하는 과정에서 링크로 이동하는 것이기 아니기 때문에 깜빡임이 없으므로 사용자 친화적이다.</li>\n<li>서버의 부하가 덜하다.</li>\n</ol>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>초기 화면 접근 시 다운로드하는 js 파일의 용량이 크기 때문에 로딩이 오래 거릴 수 있다.</li>\n<li>SEO(Search Engine Optimization): Googlle, Naver 등 검색 사이트는 웹사이트를 돌아다니면서 각 웹사이트의 HTML의 내용을 분석 후 검색엔진에 등록한다. 그런데 CSR의 경우 index.html의 body가 빈 껍데기이므로, 검색엔진이 분석하는데 어려움이 있습니다.</li>\n</ol>\n<br />\n<h2 id=\"ssrserver-side-rendering\" style=\"position:relative;\"><a href=\"#ssrserver-side-rendering\" aria-label=\"ssrserver side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSR(Server Side Rendering)</h2>\n<ol>\n<li>서버에서 렌더링을 하는 것</li>\n<li>서버에서 필요한 정보를 가지고 Html 파일을 만들게 되고, 동적으로 제어할 수 있는 js 파일을 클라이언트에게 보내줍니다.</li>\n<li>클라이언트는 잘 만들어진 문서를 받아서 사용자에게 보여주게 됩니다.</li>\n</ol>\n<h3 id=\"장점-1\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ol>\n<li>첫 번째 페이지 로딩이 빨라진다.</li>\n<li>CSR 과 달리 모든 컨텐츠가 Html에 담겨 있기 때문에 조금 더 효율적인 SEO를 할 수 있다.</li>\n</ol>\n<h3 id=\"단점-1\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ol>\n<li>사용자가 링크를 클릭하면 페이지에 대한 정보 전체를 다시 받아오기 때문에 좋지 않은 사용자 경험(UX)을 겪을 수 있습니다.</li>\n<li>사용자가 클릭할 때마다 서버에서 필요한 데이터를 가지고 Html을 만들어야 하므로 서버에 과부하가 걸리기 쉽습니다.</li>\n<li>사용자가 빠르게 웹 사이트를 확인할 수는 있지만, 동적으로 데이터를 처리하는 js 파일을 이어서 다운로드할 때까지 대기시간이 생깁니다. 예를 들어 화면에 로그인 버튼은 있는데 클릭을 해도 반응이 없는 경우가 발생할 수 있습니다. 아래 그림과 추가 설명을 보면 이해하는 데 도움이 됩니다.</li>\n</ol>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/482f0173-b984-4066-bc08-3bbe8204f785/image.png\" alt=\"\"></p>\n<h2 id=\"ttv와-tti-측면에서-비교-그림-추가-설명-\" style=\"position:relative;\"><a href=\"#ttv%EC%99%80-tti-%EC%B8%A1%EB%A9%B4%EC%97%90%EC%84%9C-%EB%B9%84%EA%B5%90-%EA%B7%B8%EB%A6%BC-%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85-\" aria-label=\"ttv와 tti 측면에서 비교 그림 추가 설명  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TTV와 TTI 측면에서 비교( 그림 추가 설명 )</h2>\n<h3 id=\"csr\" style=\"position:relative;\"><a href=\"#csr\" aria-label=\"csr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSR</h3>\n<ol>\n<li>사이트에 접속하면 서버에서 비어있는 index.html을 받습니다. 이때, 사용자는 빈 화면을 보게 됩니다.</li>\n<li>이후 JS를 로드해서 사용자가 최종적으로 동적으로 Html을 생성할 수 있고, 웹 애플리케이션 로직이 담긴 js 파일을 받아오게 됩니다.</li>\n<li>이 순간부터 웹사이트는 사용자에게 보이고, 동작도 가능하게 됩니다.</li>\n</ol>\n<ul>\n<li><strong>TTV와 TTI가 거의 일치하게 됨</strong></li>\n</ul>\n<h3 id=\"ssr\" style=\"position:relative;\"><a href=\"#ssr\" aria-label=\"ssr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSR</h3>\n<ol>\n<li>사이트에 접속하면 서버로부터 내용이 담긴 index.html을 받습니다. 이때, 사용자는 웹 사이트 화면을 볼 수 있습니다. 하지만 아직 Html을 동적으로 변환할 수 있는 js 파일을 받아오지 않았으므로, 사용자가 클릭을 해도 동작을 하지 않습니다.</li>\n<li>최종적으로 js 파일을 서버에서 받은 후부터 클릭을 처리할 수 있는 인터랙션이 가능해집니다.</li>\n</ol>\n<ul>\n<li><strong>사용자가 사이트를 볼 수 있는 시간(TTV)과 실제로 인터랙션 할 수 있는 시간(TTI)의 공백이 긴 편</strong></li>\n</ul>\n<h3 id=\"용어-설명\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4-%EC%84%A4%EB%AA%85\" aria-label=\"용어 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어 설명</h3>\n<ul>\n<li>TTV(Time To View): 사용자가 사이트를 볼 수 있을 때까지 걸리는 시간</li>\n<li>TTI(Time To Interact): 사용자가 인터랙션이 가능할 때까지 걸리는 시간</li>\n<li>인터랙션(Interaction): 전반적인 상호작용\n(ex. 사용자가 버튼을 클릭했을 때 팝업이 뜸, 검색창에 입력했을 때 데이터가 화면에 보임 등)</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#csrclient-side-rendering\">﻿CSR(Client Side Rendering)</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ssrserver-side-rendering\">SSR(Server Side Rendering)</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-1\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90-1\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ttv%EC%99%80-tti-%EC%B8%A1%EB%A9%B4%EC%97%90%EC%84%9C-%EB%B9%84%EA%B5%90-%EA%B7%B8%EB%A6%BC-%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85-\">TTV와 TTI 측면에서 비교( 그림 추가 설명 )</a></p>\n<ul>\n<li><a href=\"#csr\">CSR</a></li>\n<li><a href=\"#ssr\">SSR</a></li>\n<li><a href=\"#%EC%9A%A9%EC%96%B4-%EC%84%A4%EB%AA%85\">용어 설명</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"안녕하세요.\n이번 게시물은 이전 게시물 [SPA - 등장 배경]의 다음 편입니다.\n이전 게시물에서는 SPA가 등장한 배경, MPA와 차이점을 소개했습니다. SPA는 하나의 페이지를 서버로부터 받아와 브라우저에서 렌더링을 하며 내용을 채웁니다.\n이는 CSR과 궁합이 맞으며, 실제로 SPA + CSR로 많이 사용됩니다.\n반면 MPA는 문서에 대한 처리를 서버에서 전적으로 하므로, SSR과 궁합이 맞습니다. 따라서, 이번 게시물에서는 SPA/MPA 원리와 연관이 있는 CSR/SSR에 대해 소개하려 합니다. ﻿CSR(Client Side Rendering) 클라이언트에서 렌더링을 하는 것 클라이언트는 빈 껍데기의 index.html을 받고, 추가로 서버로부터 js 파일을 다운로드합니다. 추가로 필요한 데이터는 서버에 요청해서 데이터를 받은 다음에 동적으로 html을 생성합니다. 장점 페이지를 전환하는 과정에서 링크로 이동하는 것이기 아니기 때문에 깜빡임이 없으므로 사용자 친화적이다. 서버…","frontmatter":{"date":"August 04, 2022","title":"SPA(Single Page Application) - [2] CSR/SSR","categories":"블로그 web","author":"vvs-kim","emoji":"📓"},"fields":{"slug":"/single-page-application-2/"}},"next":{"id":"e1f09876-14d1-5947-bf9d-7380f8a0f0cf","html":"<p><img src=\"https://velog.velcdn.com/images/kws60000/post/f460a774-e0fa-493d-8654-7f762abcb847/image.png\" alt=\"\"></p>\n<h2 id=\"에러-배경\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\" aria-label=\"에러 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 배경</h2>\n<ol>\n<li>\n<p>node js 를 AWS 서버 에 배포했다.</p>\n</li>\n<li>\n<p>웹 화면에서 api 요청 시 ‘사이트에 연결할 수 없음’ 에러 확인</p>\n</li>\n</ol>\n<p>​</p>\n<h2 id=\"에러-발생-이유\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\" aria-label=\"에러 발생 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 발생 이유</h2>\n<ul>\n<li>\n<p>방화벽이 원인이었다.</p>\n</li>\n<li>\n<p>http 프로토콜과 포트를 열어주지 않아서 응답을 주지 않았다.</p>\n</li>\n</ul>\n<p>​</p>\n<h2 id=\"에러-해결-과정\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\" aria-label=\"에러 해결 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 해결 과정</h2>\n<h3 id=\"1-aws-인바운드-규칙-확인\" style=\"position:relative;\"><a href=\"#1-aws-%EC%9D%B8%EB%B0%94%EC%9A%B4%EB%93%9C-%EA%B7%9C%EC%B9%99-%ED%99%95%EC%9D%B8\" aria-label=\"1 aws 인바운드 규칙 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS 인바운드 규칙 확인</h3>\n<ul>\n<li>Instance 의 보안 그룹에 대한 포트를 열어줬는지 확인한다.</li>\n</ul>\n<p>​</p>\n<h3 id=\"2-해당-포트가-실행되는-지-확인\" style=\"position:relative;\"><a href=\"#2-%ED%95%B4%EB%8B%B9-%ED%8F%AC%ED%8A%B8%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94-%EC%A7%80-%ED%99%95%EC%9D%B8\" aria-label=\"2 해당 포트가 실행되는 지 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 해당 포트가 실행되는 지 확인</h3>\n<ul>\n<li>\n<p>netstat -tnlp</p>\n</li>\n<li>\n<p>해당 포트가 실행되는 지 알 수 있다.</p>\n</li>\n</ul>\n<p>​</p>\n<h3 id=\"3-방화벽-허용하기\" style=\"position:relative;\"><a href=\"#3-%EB%B0%A9%ED%99%94%EB%B2%BD-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 방화벽 허용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 방화벽 허용하기</h3>\n<ul>\n<li>\n<p>firewall-cmd —permanent —add-service=http</p>\n</li>\n<li>\n<p>firewall-cmd —permanent —add-service=https</p>\n</li>\n<li>\n<p>firewall-cmd —permanent —add-port=9000/tcp</p>\n</li>\n</ul>\n<p>​</p>\n<ul>\n<li>\n<p>과거에 허용한 적이 없다면 success</p>\n</li>\n<li>\n<p>과거에 허용한 적이 있다면 경고가 뜬다.</p>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\">에러 배경</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\">에러 발생 이유</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\">에러 해결 과정</a></p>\n<ul>\n<li><a href=\"#1-aws-%EC%9D%B8%EB%B0%94%EC%9A%B4%EB%93%9C-%EA%B7%9C%EC%B9%99-%ED%99%95%EC%9D%B8\">1. AWS 인바운드 규칙 확인</a></li>\n<li><a href=\"#2-%ED%95%B4%EB%8B%B9-%ED%8F%AC%ED%8A%B8%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94-%EC%A7%80-%ED%99%95%EC%9D%B8\">2. 해당 포트가 실행되는 지 확인</a></li>\n<li><a href=\"#3-%EB%B0%A9%ED%99%94%EB%B2%BD-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\">3. 방화벽 허용하기</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 04, 2022","title":"AWS EC2 Node.js 서버 연결 안될 때 ( 사이트에 연결할 수 없음 )","categories":"블로그 server","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/err-connection-refused/"}},"prev":{"id":"66ae95ed-8773-50ec-a40b-2729a1e722fe","html":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Access to XMLHttpRequest at <span class=\"token string\">'local address'</span> from origin <span class=\"token string\">'api address'</span> has been blocked by <span class=\"token constant\">CORS</span> <span class=\"token literal-property property\">policy</span><span class=\"token operator\">:</span>\nNo <span class=\"token string\">'Access-Control-Allow-Origin'</span> header is present on the requested resource<span class=\"token punctuation\">.</span></code></pre></div>\n<p>​</p>\n<h2 id=\"에러-배경\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\" aria-label=\"에러 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 배경</h2>\n<ol>\n<li>\n<p>vue 에서 kakao map api 를 사용하여 지도에서 맛집(장소)을 검색했다.</p>\n</li>\n<li>\n<p>주소 이외의 장소에 대한 상세정보가 필요했다.</p>\n</li>\n<li>\n<p>카카오 플레이스 (map.place.kakao) 로 장소에 대한 정보를 조회 요청했다.</p>\n</li>\n<li>\n<p>Cors Error 발생\n​</p>\n</li>\n</ol>\n<h2 id=\"에러-발생-이유\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\" aria-label=\"에러 발생 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 발생 이유</h2>\n<ul>\n<li>로컬 주소(localhost:8000) 와 조회하려는 주소(map.place.kakao:443) 의 출처가 다르다.</li>\n</ul>\n<p>​</p>\n<h2 id=\"cors-error-cross-origin-resource-sharing\" style=\"position:relative;\"><a href=\"#cors-error-cross-origin-resource-sharing\" aria-label=\"cors error cross origin resource sharing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS Error (Cross-Origin Resource Sharing)</h2>\n<p>간단히 말해서,</p>\n<p>브라우저에서 요청하는 주소와 응답하는 주소(출처)가 다를 때</p>\n<p>허락한 요청 외에는 에러를 발생시키겠다.</p>\n<p>​</p>\n<p>ex) 둘을 비교하면 프로토콜(http) 와 호스트(loaclhost), 포트(8000) 모두 다르다. 에러 발생</p>\n<p>요청하는 주소: http :// localhost : 8000</p>\n<p>응답하는 주소: https :// map.place.kakao : 443\n​</p>\n<h3 id=\"허락한-요청이란\" style=\"position:relative;\"><a href=\"#%ED%97%88%EB%9D%BD%ED%95%9C-%EC%9A%94%EC%B2%AD%EC%9D%B4%EB%9E%80\" aria-label=\"허락한 요청이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>허락한 요청이란?</h3>\n<p>출처가 다르더라도 요청을 허락하도록 응답 헤더에 설정한 요청을 말한다.</p>\n<p>ex) Access-Control-Allow-Origin : *</p>\n<p>ex) Access-Control-Allow-Credentials : true</p>\n<p>​</p>\n<h2 id=\"에러-해결-과정-방법-1\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-1\" aria-label=\"에러 해결 과정 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 해결 과정 (방법 1)</h2>\n<h3 id=\"1-프록시-서버를-사용해서-우회하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%9A%B0%ED%9A%8C%ED%95%98%EA%B8%B0\" aria-label=\"1 프록시 서버를 사용해서 우회하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프록시 서버를 사용해서 우회하기</h3>\n<ul>\n<li>\n<p><a href=\"https://cors-anywhere.herokuapp.com\">https://cors-anywhere.herokuapp.com</a></p>\n</li>\n<li>\n<p>해당 프록시 서버에서 헤더 설정을 해준다. ( Access-Control-Allow-Origin : * )​</p>\n</li>\n<li>\n<p>프론트에서 카카오 API를 요청하고 싶을 때 할 수 있는 유일한 방법이었다.</p>\n</li>\n<li>\n<p>해당 프록시 서버가 중단될 경우 원하는 응답을 받을 수 없고, 코드가 깔끔하지 못한 단점이 있다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">getData</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://cors-anywhere.herokuapp.com/https://place.map.kakao.com:443/main/v/9209726'</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>baseUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>​</p>\n<h2 id=\"에러-해결-과정-방법-2\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-2\" aria-label=\"에러 해결 과정 방법 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 해결 과정 (방법 2)</h2>\n<h3 id=\"1-프록시-서버-구축하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\" aria-label=\"1 프록시 서버 구축하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프록시 서버 구축하기</h3>\n<ul>\n<li>\n<p>해당 방법은 프론트에서 외부 API 를 요청하는 방법이 아니다.</p>\n</li>\n<li>\n<p>요청 순서: vue -> express -> kakao api</p>\n</li>\n<li>\n<p>express 서버에서 요청할 경우 에러를 발생시키지 않는다.</p>\n</li>\n<li>\n<p>참고했던 설명이다.</p>\n</li>\n</ul>\n<blockquote>\n<p>CORS 는 브라우저에 관련된 정책이기 때문에,\n<strong>브라우저를 통하지 않고 서버 간 통신을 할 때는 이 정책이 적용되지 않는다.</strong>\n즉, 서버에서 서버로 리소스를 요청하면 CORS 정책을 위반하지 않고 정상적으로 응답을 받을 수 있다.</p>\n</blockquote>\n<ul>\n<li>출처: <a href=\"https://xiubindev.tistory.com/115\">https://xiubindev.tistory.com/115</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ﻿express 서버에서 카카오 API 요청 코드</span>\n\n<span class=\"token keyword\">const</span> kakaoPlaceUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://place.map.kakao.com:443/main/v/'</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/place/info'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> kakaoPlaceIdUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>kakaoPlaceUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token constant\">PLACE_ID</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>kakaoPlaceIdUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>isExist <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">30001</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"장소에 대한 정보가 조회되었습니다.\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-vuejs-코드-수정\" style=\"position:relative;\"><a href=\"#2-vuejs-%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95\" aria-label=\"2 vuejs 코드 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. vue.js 코드 수정</h3>\n<ul>\n<li>express 서버에서 카카오 API 를 요청하기 때문에 vue 에서는 파라미터만 전달하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ﻿express 서버에 요청하는 함수</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getKakaoPlaceInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">axiosPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/kakao/place/info'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PLACE_ID</span><span class=\"token operator\">:</span> placeId<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ﻿express 서버에 요청하는 함수를 실행하는 부분</span>\n\n    <span class=\"token function\">getPlaceDetail</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">place<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getKakaoPlaceInfo</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">showToast</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warning'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">30001</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resSearchDetail<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calcRating</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">showToast</span><span class=\"token punctuation\">(</span><span class=\"token string\">'danger'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-vuejs-실행-후-카카오-api-요청\" style=\"position:relative;\"><a href=\"#3-vuejs-%EC%8B%A4%ED%96%89-%ED%9B%84-%EC%B9%B4%EC%B9%B4%EC%98%A4-api-%EC%9A%94%EC%B2%AD\" aria-label=\"3 vuejs 실행 후 카카오 api 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. vue.js 실행 후 카카오 API 요청</h3>\n<ul>\n<li>해당 장소에 대한 상세정보를 응답받는다.</li>\n<li>ex) 리뷰 / 후기</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/ed5d4824-eb93-4219-bd24-cffcd6370a2e/image.png\" alt=\"\"></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\">에러 배경</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\">에러 발생 이유</a></p>\n</li>\n<li>\n<p><a href=\"#cors-error-cross-origin-resource-sharing\">CORS Error (Cross-Origin Resource Sharing)</a></p>\n<ul>\n<li><a href=\"#%ED%97%88%EB%9D%BD%ED%95%9C-%EC%9A%94%EC%B2%AD%EC%9D%B4%EB%9E%80\">허락한 요청이란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-1\">에러 해결 과정 (방법 1)</a></p>\n<ul>\n<li><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%9A%B0%ED%9A%8C%ED%95%98%EA%B8%B0\">1. 프록시 서버를 사용해서 우회하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-2\">에러 해결 과정 (방법 2)</a></p>\n<ul>\n<li><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\">1. 프록시 서버 구축하기</a></li>\n<li><a href=\"#2-vuejs-%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95\">2. vue.js 코드 수정</a></li>\n<li><a href=\"#3-vuejs-%EC%8B%A4%ED%96%89-%ED%9B%84-%EC%B9%B4%EC%B9%B4%EC%98%A4-api-%EC%9A%94%EC%B2%AD\">3. vue.js 실행 후 카카오 API 요청</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 04, 2022","title":"CORS Error [ vue 에서 외부 API 요청 시 ]","categories":"블로그 web","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/vue-cors-error/"}},"site":{"siteMetadata":{"siteUrl":"https://vvs-kim.github.io","comments":{"utterances":{"repo":"vvs-kim/vvs-kim.github.io"}}}}},"pageContext":{"slug":"/single-page-application-2/","nextSlug":"/err-connection-refused/","prevSlug":"/vue-cors-error/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}