{"componentChunkName":"component---src-templates-blog-template-js","path":"/nextjs-deploy-with-docker-1","result":{"data":{"cur":{"id":"f0742e5f-58bf-5028-8df2-0af95d1743f1","html":"<h2 id=\"프론트-개발자도-도커-이미지를-만들어야-할까\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8F%84-%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"프론트 개발자도 도커 이미지를 만들어야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트 개발자도 도커 이미지를 만들어야 할까?</h2>\n<h3 id=\"1-백엔드-개발자와-협업\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%99%80-%ED%98%91%EC%97%85\" aria-label=\"1 백엔드 개발자와 협업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 백엔드 개발자와 협업</h3>\n<p>백엔드 개발자가 JAVA, DB 등을 도커HUB 에 배포하면,\n프론트엔드 개발자가 해당 이미지를 내려 받고 컴포즈 하는 방식으로 작업했습니다.\n그런데 백엔드 개발자를 많이 만나보지는 않았지만, 같이 협업을 하다보면\n‘제 자리에서도 프론트 코드를 실행하고 싶어요’, ‘화면을 보면서 테스트 하고 싶어요’ 등등 백엔드 개발자의 요구 사항이 생겼습니다.</p>\n<p>처음에는 도커가 왜 필요한지 몰랐기에 백엔드 개발자 자리에서</p>\n<ol>\n<li>git clone</li>\n<li>node install</li>\n<li>env 파일 전달</li>\n<li>os 가 달라서 생기는 오류 해결…</li>\n<li>그래서 언제 되는거죠..?</li>\n</ol>\n<p>이 모든 것을 진행하다가 결국 서버로 배포해서 확인을 했었습니다.\n만약에 nextjs 를 도커 이미지로 만들었다면, 이런 불편함은 없었을 겁니다.</p>\n<br />\n<h3 id=\"2-운영환경의-빌드파일-버전-관리\" style=\"position:relative;\"><a href=\"#2-%EC%9A%B4%EC%98%81%ED%99%98%EA%B2%BD%EC%9D%98-%EB%B9%8C%EB%93%9C%ED%8C%8C%EC%9D%BC-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC\" aria-label=\"2 운영환경의 빌드파일 버전 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 운영환경의 빌드파일 버전 관리</h3>\n<p>이전 프로젝트에서 CI/CD 를 적용하기 위해 jenkins, github-action 을 사용했습니다.\nbranch 를 통합하면 자동으로 배포가 된다는 사실은 장점이었습니다.\n그러나 배포 후 운영환경에서 에러가 발생하거나 실수를 발견했을 때,</p>\n<p>아무런 준비를 하지 않았더라면</p>\n<ol>\n<li>원인 체크(또는 롤백)</li>\n<li>package install, build</li>\n<li>서버로 빌드 파일 전송</li>\n</ol>\n<p>이 모든 것을 진행해야 하는데, 2~3분의 시간이 걸립니다.\n코드 양이 많으면 훨씬 더 오래 걸릴 겁니다.\n이 시간동안 사용자가 오류 화면을 보지 않기 위해서는\n빌드 파일을 버전 관리하여 빠른 시간내로 전송을 받아서 재실행 하는 방법이 있습니다.\n<strong>도커를 사용하면 운영환경에 맞는 이미지를 배포하여 버전 별로 내려받아 실행할 수 있습니다.</strong></p>\n<br />\n<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<p>제가 궁금했고, 중요하다고 생각한 부분을 작성한 글입니다.\nnextjs 로 작성된 코드를 배포하기 위한 내용입니다.</p>\n<h3 id=\"로컬-내의-저장파일\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%EB%82%B4%EC%9D%98-%EC%A0%80%EC%9E%A5%ED%8C%8C%EC%9D%BC\" aria-label=\"로컬 내의 저장파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 내의 저장파일</h3>\n<h4 id=\"1-dockerfile-작성\" style=\"position:relative;\"><a href=\"#1-dockerfile-%EC%9E%91%EC%84%B1\" aria-label=\"1 dockerfile 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Dockerfile 작성</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">FROM node:16.17.0-alpine\n\nRUN <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app\nWORKDIR /app\nADD ./ /app\n\nRUN <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> pm2\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"pm2-runtime\"</span>, <span class=\"token string\">\"start\"</span>, <span class=\"token string\">\"ecosystem.config.js\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>빌드한 Next 파일을 도커 이미지로 생성하고, pm2 로 실행하기 위한 스크립트입니다.\nalpine: 실행에 필요한 최소의 이미지 버전입니다. 사용하지 않을 시 이미지 용량이 커져서 배포 시간이 증가합니다.</p>\n<h4 id=\"2-ecosystemconfigjs-작성\" style=\"position:relative;\"><a href=\"#2-ecosystemconfigjs-%EC%9E%91%EC%84%B1\" aria-label=\"2 ecosystemconfigjs 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ecosystem.config.js 작성</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">apps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">cwd</span><span class=\"token operator\">:</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">script</span><span class=\"token operator\">:</span> <span class=\"token string\">'yarn start'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>name: Pm2에서 실행하는 앱 이름\ncwd: 스크립트를 실행할 위치</p>\n<h4 id=\"3-dockerignore-작성\" style=\"position:relative;\"><a href=\"#3-dockerignore-%EC%9E%91%EC%84%B1\" aria-label=\"3 dockerignore 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. .dockerignore 작성</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.git\n.github\n.vscode\n.husky\n\nscripts</code></pre></div>\n<p>이미지 용량을 최소화 하기 위해서 사용합니다.\n도커 빌드 시 사용되지 않을 폴더, 파일을 적어줍니다.</p>\n<h4 id=\"4-docker-build-push-쉘-스크립트-작성\" style=\"position:relative;\"><a href=\"#4-docker-build-push-%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"4 docker build push 쉘 스크립트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. docker build, push 쉘 스크립트 작성</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">##!/bin/bash</span>\n<span class=\"token assign-left variable\">repository</span><span class=\"token operator\">=</span>testname/testrepo\n<span class=\"token assign-left variable\">os</span><span class=\"token operator\">=</span>linux/amd64\n\n<span class=\"token comment\">### 업데이트 버전 입력</span>\n<span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"Enter the version: \"</span> version\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker build front images...\"</span>\n<span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-f</span> Dockerfile <span class=\"token parameter variable\">--platform</span> <span class=\"token variable\">$os</span> <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$repository</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$version</span> <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker push front container....\"</span>\n<span class=\"token function\">docker</span> push <span class=\"token variable\">$repository</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$version</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"🚀 success <span class=\"token variable\">$version</span> push\"</span></code></pre></div>\n<p>도커 이미지를 버전 별로 관리하기 위한 쉘 스크립트 입니다.\n사용자는 next 빌드 후 쉘스크립트를 실행하면 됩니다.</p>\n<p>os: 운영서버를 생성시 x86 프로세서를 적용했다면, 그에 맞게 빌드하기 위해 변수로 설정했습니다.\nread -p: 입력받은 버전으로 이미지를 생성하고 HUB에 푸시합니다.</p>\n<br />\n<h3 id=\"운영서버-내의-저장파일\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%84%9C%EB%B2%84-%EB%82%B4%EC%9D%98-%EC%A0%80%EC%9E%A5%ED%8C%8C%EC%9D%BC\" aria-label=\"운영서버 내의 저장파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영서버 내의 저장파일</h3>\n<h4 id=\"1-docker-composeyml-작성\" style=\"position:relative;\"><a href=\"#1-docker-composeyml-%EC%9E%91%EC%84%B1\" aria-label=\"1 docker composeyml 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. docker-compose.yml 작성</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">'3'</span>\nservices:\n    node:\n        container_name: test-front\n        image: testname/testrepo:1.0\n        ports:\n            - <span class=\"token string\">'3000:3000'</span>\n        restart: always\n        environment:\n            TZ: Asia/Seoul</code></pre></div>\n<br />\n<h4 id=\"2-docker-pull-compose-쉘-스크립트-작성\" style=\"position:relative;\"><a href=\"#2-docker-pull-compose-%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"2 docker pull compose 쉘 스크립트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. docker pull, compose 쉘 스크립트 작성</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">##!/bin/bash</span>\n<span class=\"token assign-left variable\">repository</span><span class=\"token operator\">=</span>testname/testrepo\n\n<span class=\"token comment\">## 업데이트 버전 입력</span>\n<span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"Enter the version: \"</span> version\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">\"5s/.*/        image: testname\\/testrepo:<span class=\"token variable\">$version</span>/\"</span> docker-compose.yml\n\n<span class=\"token comment\">## 업데이트 버전 다운로드</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker stop front container....\"</span>\n<span class=\"token function\">docker</span> stop <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-af</span> <span class=\"token string\">\"name=testrepo\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker remove front container....\"</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-af</span> <span class=\"token string\">\"name=testrepo\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker pull dev version.....\"</span>\n<span class=\"token function\">docker</span> pull <span class=\"token variable\">$repository</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$version</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker compose...\"</span>\n<span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker remove previous image...\"</span>\n<span class=\"token function\">docker</span> rmi <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> images <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"dangling=true\"</span> <span class=\"token parameter variable\">-q</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\">## 저장공간 용량, 업데이트 확인</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[32mcheck storage<span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span>\n<span class=\"token function\">df</span> <span class=\"token parameter variable\">-hs</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\033\">\\033</span>[32mcheck deploy<span class=\"token entity\" title=\"\\033\">\\033</span>[0m\"</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"🚀 success <span class=\"token variable\">$version</span> deploy\"</span></code></pre></div>\n<ol>\n<li>사용자가 pull 받을 이미지 버전을 입력</li>\n<li>docker-compose.yml 파일 내의 버전이 수정됨</li>\n<li>실행되고 있는 컨테이너 중지 및 삭제</li>\n<li>이미지 Pull 받은 후 컨테이너 실행</li>\n</ol>\n<p>sed -i: 특정 파일 내의 문자열을 수정하기 위해서 사용</p>\n<br />\n<h2 id=\"부족한-점\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%A1%B1%ED%95%9C-%EC%A0%90\" aria-label=\"부족한 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부족한 점</h2>\n<p>사용자는</p>\n<ol>\n<li>쉘 스크립트(도커 이미지를 생성하고 HUB에 푸시함) 실행 후 버전 입력</li>\n<li>운영 서버에 접속</li>\n<li>쉘 스크립트(도커 이미지를 pull 받고 컨테이너를 실행함) 실행 후 버전 입력</li>\n</ol>\n<p>이러한 간단한 플로우로 이미지를 배포 및 버전 관리를 할 수 있습니다.\n그렇지만 <strong>빌드하는 시간이 오래 걸리고, 그 시간을 기다려서 서버에 접속한다는 것은 불편한 일</strong>이라고 생각이 듭니다.\n1~3번 과정을 자동화하기 위해 githun-action 으로 CI/CD 를 구축해보려 합니다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8F%84-%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">프론트 개발자도 도커 이미지를 만들어야 할까?</a></p>\n<ul>\n<li><a href=\"#1-%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%99%80-%ED%98%91%EC%97%85\">1. 백엔드 개발자와 협업</a></li>\n<li><a href=\"#2-%EC%9A%B4%EC%98%81%ED%99%98%EA%B2%BD%EC%9D%98-%EB%B9%8C%EB%93%9C%ED%8C%8C%EC%9D%BC-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC\">2. 운영환경의 빌드파일 버전 관리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">시작하기</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%A1%9C%EC%BB%AC-%EB%82%B4%EC%9D%98-%EC%A0%80%EC%9E%A5%ED%8C%8C%EC%9D%BC\">로컬 내의 저장파일</a></p>\n<ul>\n<li><a href=\"#1-dockerfile-%EC%9E%91%EC%84%B1\">1. Dockerfile 작성</a></li>\n<li><a href=\"#2-ecosystemconfigjs-%EC%9E%91%EC%84%B1\">2. ecosystem.config.js 작성</a></li>\n<li><a href=\"#3-dockerignore-%EC%9E%91%EC%84%B1\">3. .dockerignore 작성</a></li>\n<li><a href=\"#4-docker-build-push-%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\">4. docker build, push 쉘 스크립트 작성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%84%9C%EB%B2%84-%EB%82%B4%EC%9D%98-%EC%A0%80%EC%9E%A5%ED%8C%8C%EC%9D%BC\">운영서버 내의 저장파일</a></p>\n<ul>\n<li><a href=\"#1-docker-composeyml-%EC%9E%91%EC%84%B1\">1. docker-compose.yml 작성</a></li>\n<li><a href=\"#2-docker-pull-compose-%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\">2. docker pull, compose 쉘 스크립트 작성</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B6%80%EC%A1%B1%ED%95%9C-%EC%A0%90\">부족한 점</a></p>\n</li>\n</ul>\n</div>","excerpt":"프론트 개발자도 도커 이미지를 만들어야 할까? 1. 백엔드 개발자와 협업 백엔드 개발자가 JAVA, DB 등을 도커HUB 에 배포하면,\n프론트엔드 개발자가 해당 이미지를 내려 받고 컴포즈 하는 방식으로 작업했습니다.\n그런데 백엔드 개발자를 많이 만나보지는 않았지만, 같이 협업을 하다보면\n‘제 자리에서도 프론트 코드를 실행하고 싶어요’, ‘화면을 보면서 테스트 하고 싶어요’ 등등 백엔드 개발자의 요구 사항이 생겼습니다. 처음에는 도커가 왜 필요한지 몰랐기에 백엔드 개발자 자리에서 git clone node install env 파일 전달 os 가 달라서 생기는 오류 해결… 그래서 언제 되는거죠..? 이 모든 것을 진행하다가 결국 서버로 배포해서 확인을 했었습니다.\n만약에 nextjs 를 도커 이미지로 만들었다면, 이런 불편함은 없었을 겁니다. 2. 운영환경의 빌드파일 버전 관리 이전 프로젝트에서 CI/CD 를 적용하기 위해 jenkins, github-action 을 사용했습니다.\n…","frontmatter":{"date":"February 19, 2023","title":"docker, nextjs 이미지 배포하기 - 1 (+쉘 스크립트)","categories":"블로그 ci/cd docker","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/nextjs-deploy-with-docker-1/"}},"next":{"id":"633db344-14f1-5a2f-bc5f-09cb2e435fc9","html":"<h2 id=\"github-action-\" style=\"position:relative;\"><a href=\"#github-action-\" aria-label=\"github action  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>github action ?</h2>\n<p>jenkins 와 더불어 CI/CD 구축을 위해 사용됩니다.\ngithub 에서 가상환경을 제공해줍니다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<p>CI 를 위한 추가 서버가 필요 없다는 게 큰 장점이었습니다.\ngit hook 에 따라 배포를 실행할 수 있습니다.</p>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<p>유료 계정이 아니라서 그런지 몰라도 빌드 시간이 오래걸렸습니다.\njenkins 로 배포할 때 총 20초 정도 걸렸었는데, 2분 정도 소요됐습니다. (s3 업로드 까지)</p>\n<br />\n<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<p>과정을 간단하게 요약한 글입니다\n보다 상세한 내용은 해당 글을 보시는걸 추천드립니다.\n<a href=\"https://blog.bespinglobal.com/post/github-action-%EC%9C%BC%EB%A1%9C-ec2-%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/\">https://blog.bespinglobal.com/post/github-action-%EC%9C%BC%EB%A1%9C-ec2-%EC%97%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/</a></p>\n<br />\n<h3 id=\"1-iam-사용자-추가\" style=\"position:relative;\"><a href=\"#1-iam-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%B6%94%EA%B0%80\" aria-label=\"1 iam 사용자 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. IAM 사용자 추가</h3>\n<p>github 코드를 s3 로 업로드하기 위해 인증된 사용자라는 검증하기 위해 사용됩니다.</p>\n<blockquote>\n</blockquote>\n<ol>\n<li>AWS - IAM > AWS 자격 증명 유형 선택 > 액세스 키 – 프로그래밍 방식 액세스</li>\n<li>GIHUB - 생성한 액세스 키 ID 와 비밀 액세스키를 자신의 레포지토리에 등록</li>\n</ol>\n<br />\n<h3 id=\"2-s3-버킷-생성\" style=\"position:relative;\"><a href=\"#2-s3-%EB%B2%84%ED%82%B7-%EC%83%9D%EC%84%B1\" aria-label=\"2 s3 버킷 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. S3 버킷 생성</h3>\n<p>github 로부터 수신된 빌드파일(압축형태)을 저장합니다.\n향후에 스냅샷으로 버전관리를 위해 사용할 수도 있습니다.</p>\n<blockquote>\n<p>ec2 용 버킷 생성</p>\n</blockquote>\n<br />\n<h3 id=\"3-iam-역할-생성\" style=\"position:relative;\"><a href=\"#3-iam-%EC%97%AD%ED%95%A0-%EC%83%9D%EC%84%B1\" aria-label=\"3 iam 역할 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. IAM 역할 생성</h3>\n<p>aws 에서 자동배포를 하기 위해 codedeploy 라는 서비스를 사용합니다.\n이때, codedeploy 가 ec2 에 접근해도 되는 역할(서비스)이 맞는지 검증기 위해 사용합니다.</p>\n<blockquote>\n<p>AWS - IAM > 역할 > 신뢰관계 > 신뢰 정책 편집 > 아래의 코드 복사 붙여넣기</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": [\n                    \"ec2.amazonaws.com\",\n                    \"codedeploy.amazonaws.com\"\n                ]\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n</code></pre></div>\n<br />\n<h3 id=\"4-codedeploy-배포-그룹-및-애플리케이션-생성\" style=\"position:relative;\"><a href=\"#4-codedeploy-%EB%B0%B0%ED%8F%AC-%EA%B7%B8%EB%A3%B9-%EB%B0%8F-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%83%9D%EC%84%B1\" aria-label=\"4 codedeploy 배포 그룹 및 애플리케이션 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Codedeploy 배포 그룹 및 애플리케이션 생성</h3>\n<p>aws 에서 지원하는 자동배포 서비스입니다.\n배포 진행상황을 모니터링할 수 있습니다. 문제가 생길시 재시도 하고 이력을 확인할 수 있습니다.</p>\n<blockquote>\n<p>AWS - Codedeploy > 애플리케이션 생성</p>\n</blockquote>\n<p>배포 그룹 및 애플리케이션을 생성합니다.\n주의할 점은 배포 그룹 생성 시 전 단계에서 진행한 IAM 역할을 입력하는 것입니다.</p>\n<br />\n<h3 id=\"5-codedeploy-agent-설치하기\" style=\"position:relative;\"><a href=\"#5-codedeploy-agent-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"5 codedeploy agent 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. CodeDeploy agent 설치하기</h3>\n<p>CodeDeploy 서비스를 사용하기 위해서 ec2 인스턴스 내에 agent 를 설치해야 합니다.\nCodeDeploy agent 를 사용하여, 이전 버전에 대한 스냅샷을 ec2 에 자동 저장함으로서(최대 5개) 배포에 문제가 생길 시 백업할 수 있습니다.</p>\n<p>ec2 ubuntu 20 버전에 대해서는 자료가 많이 있습니다.\n저는 ubuntu 22 버전을 사용하며 ruby 버전으로 인한 오류가 발생했습니다.\n인스턴스가 ubuntu 22 버전이라면 다음과 같이 설치하시면 됩니다.</p>\n<p>참고 - <a href=\"https://github.com/aws/aws-codedeploy-agent/issues/301#issuecomment-1129912011\">https://github.com/aws/aws-codedeploy-agent/issues/301#issuecomment-1129912011</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ruby-full ruby-webrick <span class=\"token function\">wget</span> <span class=\"token parameter variable\">-y</span>\n<span class=\"token builtin class-name\">cd</span> /tmp\n<span class=\"token function\">wget</span> https://aws-codedeploy-ap-northeast-2.s3.ap-northeast-2.amazonaws.com/releases/codedeploy-agent_1.3.2-1902_all.deb\n<span class=\"token function\">mkdir</span> codedeploy-agent_1.3.2-1902_ubuntu22\ndpkg-deb <span class=\"token parameter variable\">-R</span> codedeploy-agent_1.3.2-1902_all.deb codedeploy-agent_1.3.2-1902_ubuntu22\n<span class=\"token function\">sed</span> <span class=\"token string\">'s/Depends:.*/Depends:ruby3.0/'</span> <span class=\"token parameter variable\">-i</span> ./codedeploy-agent_1.3.2-1902_ubuntu22/DEBIAN/control\ndpkg-deb <span class=\"token parameter variable\">-b</span> codedeploy-agent_1.3.2-1902_ubuntu22/\n<span class=\"token function\">sudo</span> dpkg <span class=\"token parameter variable\">-i</span> codedeploy-agent_1.3.2-1902_ubuntu22.deb\nsystemctl list-units <span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>service <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> codedeploy\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> codedeploy-agent status</code></pre></div>\n<br />\n<h3 id=\"6-github-action-스크립트-추가\" style=\"position:relative;\"><a href=\"#6-github-action-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80\" aria-label=\"6 github action 스크립트 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. github action 스크립트 추가</h3>\n<p>github action 을 사용하기 위해 세 개의 스크립트가 필요합니다.</p>\n<ol>\n<li>githuc action 스크립트: CI 를 위한 스크립트입니다. s3 로 업로드 되기까지의 모든 과정입니다.</li>\n<li>appspec.yml: 빌드 파일을 어느 디렉토리로 전송할지, 배포 과정에서 실행하고 싶은 스크립트를 지정하는 스크립트입니다.</li>\n<li>after_install.yml: ec2 인스턴스가 s3 로 부터 빌드 파일을 전송 받은 후 실행하는 스크립트입니다.</li>\n</ol>\n<blockquote>\n<p>GITHUB - repository -> new workflow -> actions -> set up a workflow yourself</p>\n</blockquote>\n<p>githuc action workflow 예시입니다. 각 환경에 맞게 변경하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">name: CI\n\non:\n  push:\n    branches: <span class=\"token punctuation\">[</span> main <span class=\"token punctuation\">]</span>\n\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: checkout release\n      uses: actions/checkout@v3\n\n    - name: Package <span class=\"token function\">install</span>\n      run: <span class=\"token function\">yarn</span>\n\n    - name: Build\n      run: <span class=\"token function\">yarn</span> build\n\n    - name: <span class=\"token function\">zip</span> distributions\n      run: <span class=\"token function\">zip</span> <span class=\"token parameter variable\">-r</span> with-eat-build.zip  ./\n\n    - name: AWS configure credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: <span class=\"token variable\">${{ secrets.AWS_ACCESS_KEY_ID }</span><span class=\"token punctuation\">}</span>\n        aws-secret-access-key: <span class=\"token variable\">${{ secrets.AWS_SECRET_ACCESS_KEY }</span><span class=\"token punctuation\">}</span>\n        aws-region: ap-northeast-2\n\n    - name: upload to S3\n      run: aws s3 <span class=\"token function\">cp</span> <span class=\"token parameter variable\">--region</span> ap-northeast-2 ./with-eat-build.zip s3://with-eat-bucket/public/\n\n    - name: deploy with AWS codeDeploy\n      run: aws deploy create-deployment\n        --application-name with-eat-deploy\n        --deployment-config-name CodeDeployDefault.OneAtATime\n        --deployment-group-name with-eat-deploy-group\n        --s3-location <span class=\"token assign-left variable\">bucket</span><span class=\"token operator\">=</span>with-eat-bucket,key<span class=\"token operator\">=</span>public/with-eat-build.zip,bundleType<span class=\"token operator\">=</span>zip</code></pre></div>\n<p>appspec.yml 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token number\">0.0</span>\nos: linux\n\nfiles:\n  - source: /\n    destination: /var/www/html\n    overwrite: <span class=\"token function\">yes</span>\n\npermissions:\n  - object: /var/www/html\n    owner: root\n    group: root\n    mode: <span class=\"token number\">755</span>\n\nhooks:\n  AfterInstall:\n    - location: scripts/after_install.sh\n      timeout: <span class=\"token number\">60</span>\n      runas: root</code></pre></div>\n<p>after_install.sh 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo \"Project directory\"\ncd /var/www/html;\n\necho \"Project restart\"\npm2 kill &amp;&amp; pm2 start yarn --name yourappname -- start -p 3000 || echo 'Failed pm2 kill';</code></pre></div>\n<br />\n<h2 id=\"에러-발생시\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D%EC%8B%9C\" aria-label=\"에러 발생시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 발생시</h2>\n<p>EC2 + S3 + Codedeploy + githubaction 이렇게 많은 서비스를 이용하다보니 버전, 권한, 전송 등 에러가 발생할겁니다.</p>\n<p>제가 주로 해결한 방법은</p>\n<ol>\n<li>github action 의 error log</li>\n<li>ec2 인스턴스 var/log/aws/codedeploy-agent/codedeploy-agent.log</li>\n</ol>\n<p>두 로그를 확인하는 것입니다.</p>\n<h3 id=\"에러-케이스\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EC%BC%80%EC%9D%B4%EC%8A%A4\" aria-label=\"에러 케이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 케이스</h3>\n<br />\n<blockquote>\n<p>Error: does not give you permission to perform operations in the following AWS service: AmazonEC2</p>\n</blockquote>\n<ul>\n<li>IAM 의 EC2 접근 권한 문제로 인해 S3 -> EC2 업로드가 안됨\n해결 방법: 다른 EC2 권한을 준다. 안되면, AmazonEC2FullAccess 정책 추가</li>\n</ul>\n<blockquote>\n<p>Error: CodeDeploy agent did not find an AppSpec file within the unpacked revision directory at revision-relative path “appspec.yml”</p>\n</blockquote>\n<ul>\n<li>빌드파일 내에 appspec.yml 파일을 찾지 못해서 오류가 발생함</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#github-action-\">github action ?</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">시작하기</a></p>\n<ul>\n<li><a href=\"#1-iam-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%B6%94%EA%B0%80\">1. IAM 사용자 추가</a></li>\n<li><a href=\"#2-s3-%EB%B2%84%ED%82%B7-%EC%83%9D%EC%84%B1\">2. S3 버킷 생성</a></li>\n<li><a href=\"#3-iam-%EC%97%AD%ED%95%A0-%EC%83%9D%EC%84%B1\">3. IAM 역할 생성</a></li>\n<li><a href=\"#4-codedeploy-%EB%B0%B0%ED%8F%AC-%EA%B7%B8%EB%A3%B9-%EB%B0%8F-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%83%9D%EC%84%B1\">4. Codedeploy 배포 그룹 및 애플리케이션 생성</a></li>\n<li><a href=\"#5-codedeploy-agent-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\">5. CodeDeploy agent 설치하기</a></li>\n<li><a href=\"#6-github-action-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80\">6. github action 스크립트 추가</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D%EC%8B%9C\">에러 발생시</a></p>\n<ul>\n<li><a href=\"#%EC%97%90%EB%9F%AC-%EC%BC%80%EC%9D%B4%EC%8A%A4\">에러 케이스</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 01, 2023","title":"aws ec2에 github action 으로 프론트 자동 배포하기","categories":"블로그 ci/cd","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/deploy-with-github-action-and-ec2/"}},"prev":{"id":"24d746b8-237e-51a2-a5cf-2d34568b25dc","html":"<p><a href=\"https://vvs-kim.github.io/nextjs-deploy-with-docker-1/\">[docker] node, nextjs 이미지 배포하기 - 1</a>\n이전 게시물과 이어지는 내용입니다.\n추가 설명이 필요한 부분은 이전 게시물을 참고 해주시면 됩니다.</p>\n<h2 id=\"자동화가-필요해\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99%ED%99%94%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%B4\" aria-label=\"자동화가 필요해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동화가 필요해..</h2>\n<p>전 게시물에서 node 와 nginx 를 도커 이미지로 생성했고,\n각 컨테이너를 실행하는 쉘 스크립트를 만드는 내용을 작성했습니다.</p>\n<br />\n<h3 id=\"쉘-스크립트를-이용한-수동-배포의-단점\" style=\"position:relative;\"><a href=\"#%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%88%98%EB%8F%99-%EB%B0%B0%ED%8F%AC%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"쉘 스크립트를 이용한 수동 배포의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쉘 스크립트를 이용한 수동 배포의 단점</h3>\n<p>사용자는</p>\n<ol>\n<li>쉘 스크립트(도커 이미지를 생성하고 HUB에 푸시함) 실행 후 버전 입력</li>\n<li>운영 서버에 접속</li>\n<li>쉘 스크립트(도커 이미지를 pull 받고 컨테이너를 실행함) 실행 후 버전 입력</li>\n</ol>\n<p>이러한 간단한 플로우로 이미지를 배포 및 버전 관리를 할 수 있습니다.\n이러한 플로우에는 사용자는 다음과 같은 단점이 있습니다.</p>\n<ol>\n<li>로컬, 운영서버 각 환경에서 배포하는 이미지의 버전를 입력해야 합니다. (총 2번)</li>\n<li>언제 끝날지 모르는 도커 빌드, 푸시 시간이 끝나기를 기다려야 합니다.</li>\n<li>도커 푸시 후, 서버에 접속해서 이미지를 전송 받아야 합니다.</li>\n</ol>\n<br />\n<h3 id=\"해결책--github-action\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EC%B1%85--github-action\" aria-label=\"해결책  github action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결책 = github action</h3>\n<p><strong>자동화를 통해서 한 번의 실행으로 모든 작업을 실행할 수는 없을까?</strong> 고민했습니다.\n이러한 고민을 해결하기 위해 <strong>github action</strong> 을 사용했습니다.</p>\n<p>도커를 사용하기 이전에는 AWS 에서 제공하는 codeDeploy, s3 서비스를 통해서 CI/CD 를 구축했었습니다.\ncodeDeploy 를 사용하면 <strong>ubuntu 버전 호환 문제와 ruby, codeAgent 등을 설치해야 해서 용량을 많이 차지</strong>하는 부분이 불편했습니다.\n또한, S3 로 버전 관리를 하는 것이 아니라 Docker HUB 를 통해서 버전관리를 하므로 S3 를 사용할 이유도 없었습니다.</p>\n<br />\n<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<h3 id=\"1-dockerfile-수정\" style=\"position:relative;\"><a href=\"#1-dockerfile-%EC%88%98%EC%A0%95\" aria-label=\"1 dockerfile 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Dockerfile 수정</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">FROM node:16.17.0-alpine\n\nRUN <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app\nWORKDIR /app\nADD ./ /app\n\nRUN <span class=\"token function\">yarn</span> <span class=\"token function\">install</span>   // 변경된 부분\nRUN <span class=\"token function\">yarn</span> build     // 변경된 부분\n\nRUN <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> pm2\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"pm2-runtime\"</span>, <span class=\"token string\">\"start\"</span>, <span class=\"token string\">\"ecosystem.config.js\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>도커 Node 이미지를 생성 시 패키지 파일을 생성하고 빌드 파일을 생성하기 위함입니다.</p>\n<br />\n<h3 id=\"2-github-action-secret-변수-생성\" style=\"position:relative;\"><a href=\"#2-github-action-secret-%EB%B3%80%EC%88%98-%EC%83%9D%EC%84%B1\" aria-label=\"2 github action secret 변수 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Github action secret 변수 생성</h3>\n<p>github action 을 사용하기 위해 서버 접속, 도커 로그인 등을 하기 위한\n보안 정보를 github 에 등록하는 단계입니다.</p>\n<h4 id=\"해당-경로로-이동\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EB%8B%B9-%EA%B2%BD%EB%A1%9C%EB%A1%9C-%EC%9D%B4%EB%8F%99\" aria-label=\"해당 경로로 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해당 경로로 이동</h4>\n<p>github.com > repository > settings > secrets and variables > actions</p>\n<h4 id=\"해당-변수-추가\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EB%8B%B9-%EB%B3%80%EC%88%98-%EC%B6%94%EA%B0%80\" aria-label=\"해당 변수 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해당 변수 추가</h4>\n<p>REMOTE_IP : 서버 IP <br />\nREMOTE_SSH_PORT : 서버 접속 PORT <br />\nREMOTE_SSH_USER : 서버 접속 계정 <br />\nREMOTE_SSH_KEY : 서버에 접속하기 위한 SSH KEY 의 내용 <br />\nDOCKER_REPOSITORY : 도커 유저명/레포지토리명 <br />\nDOCKER_USERNAME : 도커 유저명 <br />\nDOCKER_PASSWORD : 도커 비밀번호 <br /></p>\n<br />\n<h3 id=\"3-github-action-workflow-파일-생성\" style=\"position:relative;\"><a href=\"#3-github-action-workflow-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"3 github action workflow 파일 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. github action workflow 파일 생성</h3>\n<p>이제 자동 배포 스크립트를 작성하기 위한 준비가 됐습니다.\n해당 경로에 다음 파일을 생성합니다.\n<em>프로젝트/.github/workflows/my_deploy.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">name: CI\n\non:\n    push:\n        branches: <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span>\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n        env:\n            VERSION: <span class=\"token number\">1.0</span>.0\n            OS: linux/amd64\n\n        steps:\n            - name: Checkout release\n              uses: actions/checkout@v3\n\n            - name: Set <span class=\"token function\">env</span>\n              run: <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"TAG=<span class=\"token variable\">$VERSION</span>\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$GITHUB_ENV</span>\n\n            - name: Confirm <span class=\"token function\">env</span>\n              run: <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"RELEASE_VERSION=<span class=\"token variable\">${{ env.TAG }</span>}\"</span>\n\n            - name: Login to DockerHub\n              uses: docker/login-action@v1\n              with:\n                  username: <span class=\"token variable\">${{ secrets.DOCKER_USERNAME }</span><span class=\"token punctuation\">}</span>\n                  password: <span class=\"token variable\">${{ secrets.DOCKER_PASSWORD }</span><span class=\"token punctuation\">}</span>\n\n            - name: build and release to DockerHub\n              env:\n                  REPO: <span class=\"token variable\">${{ secrets.DOCKER_REPOSITORY }</span><span class=\"token punctuation\">}</span>\n              run: <span class=\"token operator\">|</span>\n                  <span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-f</span> Dockerfile.prod <span class=\"token parameter variable\">--platform</span> <span class=\"token variable\">$OS</span> <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$REPO</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">${{ env.TAG }</span><span class=\"token punctuation\">}</span> <span class=\"token builtin class-name\">.</span>\n                  <span class=\"token function\">docker</span> push <span class=\"token variable\">$REPO</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">${{ env.TAG }</span><span class=\"token punctuation\">}</span>\n\n            - name: Deploy\n              uses: appleboy/ssh-action@master\n              with:\n                  host: <span class=\"token variable\">${{ secrets.REMOTE_IP }</span><span class=\"token punctuation\">}</span>\n                  username: <span class=\"token variable\">${{ secrets.REMOTE_SSH_USER }</span><span class=\"token punctuation\">}</span>\n                  key: <span class=\"token variable\">${{ secrets.REMOTE_SSH_KEY }</span><span class=\"token punctuation\">}</span>\n                  port: <span class=\"token variable\">${{ secrets.REMOTE_SSH_PORT }</span><span class=\"token punctuation\">}</span>\n                  script: <span class=\"token operator\">|</span>\n                      <span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n\n                      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker stop front container....\"</span>\n                      <span class=\"token function\">docker</span> stop <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-af</span> <span class=\"token string\">\"name=test-front\"</span><span class=\"token variable\">)</span></span>\n\n                      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"=>>> docker remove front container....\"</span>\n                      <span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-af</span> <span class=\"token string\">\"name=test-front\"</span><span class=\"token variable\">)</span></span>\n\n                      <span class=\"token function\">docker</span> pull <span class=\"token variable\">${{ secrets.DOCKER_REPOSITORY }</span><span class=\"token punctuation\">}</span>:<span class=\"token variable\">${{ env.TAG }</span><span class=\"token punctuation\">}</span>\n\n                      <span class=\"token builtin class-name\">cd</span> /\n                      <span class=\"token builtin class-name\">pwd</span>\n                      <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span>  <span class=\"token string\">\"5s|.*|        image: <span class=\"token variable\">${{ secrets.DOCKER_REPOSITORY }</span>}:<span class=\"token variable\">${{ env.TAG }</span>}|g\"</span> docker-compose.yml\n\n                      <span class=\"token function\">docker</span> images\n\n                      <span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span>\n                      <span class=\"token function\">docker</span> image prune <span class=\"token parameter variable\">-af</span>\n                      <span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre></div>\n<br />\n<h4 id=\"githun-action-스크립트-추가-설명\" style=\"position:relative;\"><a href=\"#githun-action-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85\" aria-label=\"githun action 스크립트 추가 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Githun action 스크립트 추가 설명</h4>\n<p>이전 게시물에서 다룬 내용을 하나의 스크립트로 축약했습니다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">on:\n    push:\n        branches: [main]\n</code></pre></div>\n<p>main 브랜치로 통합될(push, merge) 시 github action 을 실행하기 위함입니다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">            - name: Set <span class=\"token function\">env</span>\n              run: <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"TAG=<span class=\"token variable\">$VERSION</span>\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$GITHUB_ENV</span>\n\n            - name: Confirm <span class=\"token function\">env</span>\n              run: <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"RELEASE_VERSION=<span class=\"token variable\">${{ env.TAG }</span>}\"</span></code></pre></div>\n<p>github action 변수를 지정하는 단계입니다.\nenv 필드로 사용할 수도 있지만, 도커 내부에서 사용이 안되므로 이렇게 지정해야 합니다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">            - name: build and release to DockerHub\n              env:\n                  REPO: <span class=\"token variable\">${{ secrets.DOCKER_REPOSITORY }</span><span class=\"token punctuation\">}</span>\n              run: <span class=\"token operator\">|</span>\n                  <span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-f</span> Dockerfile.prod <span class=\"token parameter variable\">--platform</span> <span class=\"token variable\">$OS</span> <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$REPO</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">${{ env.TAG }</span><span class=\"token punctuation\">}</span> <span class=\"token builtin class-name\">.</span>\n                  <span class=\"token function\">docker</span> push <span class=\"token variable\">$REPO</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">${{ env.TAG }</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Dockerfile 로 원하는 버전의 이미지를 생성 후 Hub 로 Push 하는 단계입니다.</p>\n<br />\n<h3 id=\"github-action-사용법\" style=\"position:relative;\"><a href=\"#github-action-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"github action 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Github action 사용법</h3>\n<ol>\n<li>프로젝트 코드 수정</li>\n<li>my_deploy.yml 파일 내의 버전수정 (ex. 1.0.1)</li>\n<li>main branch 로 병합</li>\n<li>github action 실행됨</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9E%90%EB%8F%99%ED%99%94%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%B4\">자동화가 필요해..</a></p>\n<ul>\n<li><a href=\"#%EC%89%98-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%88%98%EB%8F%99-%EB%B0%B0%ED%8F%AC%EC%9D%98-%EB%8B%A8%EC%A0%90\">쉘 스크립트를 이용한 수동 배포의 단점</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0%EC%B1%85--github-action\">해결책 = github action</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">시작하기</a></p>\n<ul>\n<li>\n<p><a href=\"#1-dockerfile-%EC%88%98%EC%A0%95\">1. Dockerfile 수정</a></p>\n</li>\n<li>\n<p><a href=\"#2-github-action-secret-%EB%B3%80%EC%88%98-%EC%83%9D%EC%84%B1\">2. Github action secret 변수 생성</a></p>\n<ul>\n<li><a href=\"#%ED%95%B4%EB%8B%B9-%EA%B2%BD%EB%A1%9C%EB%A1%9C-%EC%9D%B4%EB%8F%99\">해당 경로로 이동</a></li>\n<li><a href=\"#%ED%95%B4%EB%8B%B9-%EB%B3%80%EC%88%98-%EC%B6%94%EA%B0%80\">해당 변수 추가</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-github-action-workflow-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\">3. github action workflow 파일 생성</a></p>\n<ul>\n<li><a href=\"#githun-action-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85\">Githun action 스크립트 추가 설명</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#github-action-%EC%82%AC%EC%9A%A9%EB%B2%95\">Github action 사용법</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 25, 2023","title":"docker, nextjs 이미지 배포하기 - 2 (github action 자동 배포)","categories":"블로그 ci/cd docker","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/nextjs-deploy-with-docker-2/"}},"site":{"siteMetadata":{"siteUrl":"https://vvs-kim.github.io","comments":{"utterances":{"repo":"vvs-kim/vvs-kim.github.io"}}}}},"pageContext":{"slug":"/nextjs-deploy-with-docker-1/","nextSlug":"/deploy-with-github-action-and-ec2/","prevSlug":"/nextjs-deploy-with-docker-2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}