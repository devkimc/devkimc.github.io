{"componentChunkName":"component---src-templates-blog-template-js","path":"/could-not-safety-identify-store-assignment-for-repository/","result":{"data":{"cur":{"id":"ba282916-c974-5eb1-886c-fa4fc56ae71f","html":"<h1 id=\"-에러-상황\" style=\"position:relative;\"><a href=\"#-%EC%97%90%EB%9F%AC-%EC%83%81%ED%99%A9\" aria-label=\" 에러 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚫 에러 상황</h1>\n<p>Redis 내의 Refresh token 값을 다루기 위해 CrudRepository 를 사용하고, RDBMS 내의 데이터를 다루기 위해 JpaRepository 를 사용했습니다.</p>\n<p>프로젝트를 실행하면 뜨는 여러 로그 중 에러는 아니지만, 반갑지 않은 INFO 로그가 2개의 영역으로 나뉘어 7개 정도 반복되는 것을 확인했습니다. 엔티티 클래스 수 만큼 반복 되었고, 아래처럼 로그가 출력됐습니다.</p>\n<ul>\n<li>A 영역: Spring Data JPA</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2023-06-18 19:10:30.731  INFO 4986 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode\n2023-06-18 19:10:30.670  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data JPA - Could not safely identify store assignment for repository candidate interface jparest.practice.auth.jwt.RefreshTokenRepository; If you want this repository to be a JPA repository, consider annotating your entities with one of these annotations: javax.persistence.Entity, javax.persistence.MappedSuperclass (preferred), or consider extending one of the following types with your repository: org.springframework.data.jpa.repository.JpaRepository</code></pre></div>\n<ul>\n<li>B 영역: Spring Data Redis</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2023-06-18 19:10:30.741  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface jparest.practice.group.repository.GroupRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository\n2023-06-18 19:10:30.741  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface jparest.practice.group.repository.UserGroupRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository\n2023-06-18 19:10:30.741  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface jparest.practice.invite.repository.InviteRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository\n2023-06-18 19:10:30.741  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface jparest.practice.rest.repository.GroupRestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository\n2023-06-18 19:10:30.742  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface jparest.practice.rest.repository.RestRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository\n2023-06-18 19:10:30.742  INFO 4986 --- [           main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface jparest.practice.user.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository</code></pre></div>\n<p>로그는 두개의 영역으로 나뉘었고, 읽어보면</p>\n<p>“Spring Data JPA: <strong>엔티티의 레포지토리에 대해 식별할 수 없다</strong>. 만약 이 레포지토리를 JPA repository로 만들려면 @\bEntity 어노테이션을 사용해라”</p>\n<p>“Spring Data Redis: <strong>엔티티의 레포지토리에 대해 식별할 수 없다</strong>. 만약 이 레포지토리를 Redis repository로 만들려면 @RedisHash 어노테이션을 사용해라”</p>\n<p>이런 내용인 것 같습니다. 왜 레포지토리를 식별할 수 없는지 의문이었습니다.</p>\n<br />\n<h1 id=\"-에러-원인\" style=\"position:relative;\"><a href=\"#-%EC%97%90%EB%9F%AC-%EC%9B%90%EC%9D%B8\" aria-label=\" 에러 원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📜 에러 원인</h1>\n<p>JpaRepository, CrudRepository 는 모두 Repository 인터페이스를 확장한 것입니다.</p>\n<p>문제는 @Entity 를 사용하지 않고 Respository 인터페이스를 사용(Redis 의 경우)했을 때, Spring 이\n’<strong>Repository 로부터 생성된 메서드를 어떻게 사용하지?</strong>’ 하고 의문을 품고 스스로 찾는다고 합니다.</p>\n<p>따라서, 아래처럼 Redis 에서 CrudRepository 를 사용하고 @Entity 를 사용하지 않았으므로\nSpring은 각 Repository 의 메서드 들을 어떻게 구현해야하는 지 찾습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">jparest<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>jwt</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@RedisHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refresh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RefreshToken</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> refreshToken<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RefreshTokenRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CrudRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RefreshToken</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>그러한 탐색 과정이 (JpaRepository x N) + (CrudRepository x M) 만큼 이루어진거라고 생각이 듭니다. (추측입니다.)</p>\n<br />\n<h1 id=\"-해결-방법\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\" 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 해결 방법</h1>\n<h2 id=\"1-enableredisrepositories-추가\" style=\"position:relative;\"><a href=\"#1-enableredisrepositories-%EC%B6%94%EA%B0%80\" aria-label=\"1 enableredisrepositories 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. EnableRedisRepositories 추가</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">jparest<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableRedisRepositories</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableRedisRepositories</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"jparest.practice.auth.jwt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>EnableRedisRepositories 어노테이션 을 이용하면,\nRedisRepository 를 활성화 시키고, 빈 스캐닝 범위를 지정할 수 있습니다.\n이렇게 지정해주니 RedisRepository 에 대한 탐색을 다른 경로해서 하지 않아서 B 영역 로그가 출력되지 않았습니다.</p>\n<br />\n<h2 id=\"2-enablejparepositories-추가\" style=\"position:relative;\"><a href=\"#2-enablejparepositories-%EC%B6%94%EA%B0%80\" aria-label=\"2 enablejparepositories 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. EnableJpaRepositories 추가</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">jparest<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FilterType</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableJpaRepositories</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableJpaRepositories</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"jparest.practice\"</span><span class=\"token punctuation\">,</span>\n        excludeFilters <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>\n                type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASPECTJ</span><span class=\"token punctuation\">,</span> pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"jparest.practice.auth.jwt.*\"</span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JpaConfig</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여전히 A 로그는 출력됐습니다.\n그래서 JpaRepository 를 활성화 시키고, 빈 스캐닝 범위를 지정하기 위해 추가 <strong>EnableJpaRepositories</strong> 어노테이션을 추가했습니다.\n주의할 점은 @Entity 가 없는데 Repository 를 사용하면 Spring 이 어떻게 메서드를 구현할 지 찾는다고 했습니다.\n따라서 Redis 를 사용하는 곳은 빈 스캐닝 범위에서 제외시켰습니다.\nEnableJpaRepositories 까지 적용했더니 모든 로그가 사라진 것을 확인할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2023-06-18 20:42:02.762  INFO 5431 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 141 ms. Found 6 JPA repository interfaces.\n2023-06-18 20:42:02.763  INFO 5431 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode\n2023-06-18 20:42:02.763  INFO 5431 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.\n2023-06-18 20:42:02.772  INFO 5431 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 3 ms. Found 1 Redis repository interfaces.</code></pre></div>\n<br />\n<h1 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h1>\n<p><a href=\"https://stackoverflow.com/questions/47002094/spring-multiple-spring-data-modules-found-entering-strict-repository-configur\">https://stackoverflow.com/questions/47002094/spring-multiple-spring-data-modules-found-entering-strict-repository-configur</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-enableredisrepositories-%EC%B6%94%EA%B0%80\">1. EnableRedisRepositories 추가</a></li>\n<li><a href=\"#2-enablejparepositories-%EC%B6%94%EA%B0%80\">2. EnableJpaRepositories 추가</a></li>\n</ul>\n</div>","excerpt":"🚫 에러 상황 Redis 내의 Refresh token 값을 다루기 위해 CrudRepository 를 사용하고, RDBMS 내의 데이터를 다루기 위해 JpaRepository 를 사용했습니다. 프로젝트를 실행하면 뜨는 여러 로그 중 에러는 아니지만, 반갑지 않은 INFO 로그가 2개의 영역으로 나뉘어 7개 정도 반복되는 것을 확인했습니다. 엔티티 클래스 수 만큼 반복 되었고, 아래처럼 로그가 출력됐습니다. A 영역: Spring Data JPA B 영역: Spring Data Redis 로그는 두개의 영역으로 나뉘었고, 읽어보면 “Spring Data JPA: 엔티티의 레포지토리에 대해 식별할 수 없다. 만약 이 레포지토리를 JPA repository로 만들려면 @\bEntity 어노테이션을 사용해라” “Spring Data Redis: 엔티티의 레포지토리에 대해 식별할 수 없다. 만약 이 레포지토리를 Redis repository로 만들려면 @RedisHash 어노테이션을 사용해…","frontmatter":{"date":"June 18, 2023","title":"Could not safely identify store assignment for repository candidate interface","categories":"블로그 spring","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/could-not-safety-identify-store-assignment-for-repository/"}},"next":{"id":"611398ab-c106-5ee5-8ae1-f0b337ba3884","html":"<h2 id=\"-개념\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%85%90\" aria-label=\" 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📕 개념</h2>\n<h3 id=\"-교착-상태deadlock\" style=\"position:relative;\"><a href=\"#-%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9Cdeadlock\" aria-label=\" 교착 상태deadlock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 교착 상태(Deadlock)</h3>\n<p>노트북으로 코딩을 하고 싶은 두 사람 A, B(프로세스/스레드) 가 있다.\nA는 배터리가 0% 인 노트북(자원)을 가지고 있고(점유) 충전기 를 기다리고 있다(대기).\nB는 충전기(자원)를 가지고 있고(점유) 노트북을 기다리고 있다(대기).</p>\n<p>이처럼 <strong>서로 자원을 놓아줄 생각은 없고, 자원 요청을 무한정 대기하고 있는 상태</strong> 를 말합니다.</p>\n<blockquote>\n<h3 id=\"critical-section임계-영역\" style=\"position:relative;\"><a href=\"#critical-section%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD\" aria-label=\"critical section임계 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Critical section(임계 영역)</h3>\n<p>여기서 노트북과 충전기를 공유 자원이라고 부르고, <strong>공유자원이 속해 있어 교착 상태가 발생할 수 있는 영역</strong>을 임계영역이라고 부릅니다.\n공유 데이터의 일관성을 보장하기 위해 하나의 프로세스/스레드만 진입해서 실행(상호배제)가능한 영역입니다.</p>\n</blockquote>\n<p>교착 상태가 발생하기 위해서는 네가지 조건을 충족해야 합니다. 이중 상호배제를 중점으로 알아보려 합니다.</p>\n<ol>\n<li>상호배제</li>\n<li>점유대기</li>\n<li>비선점</li>\n<li>순환대기</li>\n</ol>\n<br />\n<h3 id=\"mutual-exclusion상호-배제\" style=\"position:relative;\"><a href=\"#mutual-exclusion%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C\" aria-label=\"mutual exclusion상호 배제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutual exclusion(상호 배제)</h3>\n<p>프로세스/스레드가 필요로 하는 공유자원에 대해 배타적인 통제권을 요구하는 것을 말합니다.\n다시 말하면, 하나의 프로세스/스레드가 공유자원을 사용할 때 다른 프로세스가 공유자원에 접근할 수 없도록 통제하는 것을 말합니다.</p>\n<br />\n<h3 id=\"-뮤텍스-mut-ual-ex-clusion\" style=\"position:relative;\"><a href=\"#-%EB%AE%A4%ED%85%8D%EC%8A%A4-mut-ual-ex-clusion\" aria-label=\" 뮤텍스 mut ual ex clusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 뮤텍스 (Mut <del>ual</del> ex <del>clusion</del>)</h3>\n<p>화장실(공유자원)이 하나뿐인 식당이 있습니다. 식당에는 A, B, C 라는 손님(프로세스/스레드)이 식사 중입니다.\n화장실을 가기 위해서는 카운터 옆에 걸린 열쇠가 있어야 합니다.</p>\n<p>A 손님이 열쇠를 들고 화장실에 먼저 들어갔습니다. 잠시 뒤 B 손님이 화장실에 가고 싶어졌습니다. 그러나 카운터에 열쇠가 없기 때문에 카운터 앞에서 기다려야 합니다.</p>\n<p>C 손님도 화장실에 가고 싶어졌고, B 손님 뒤에서 대기 해야 합니다.</p>\n<p>A 손님이 화장실에서 나와 열쇠를 반납했습니다. 기다리던 손님들 중 맨 앞에 기다리던 B 손님이 열쇠를 갖을 수 있고, 화장실에 갈 수 있습니다.</p>\n<p>이것이 뮤텍스가 동작하는 방식입니다.</p>\n<p>화장실 열쇠는 공유자원에 접근하기 위한 어떠한 오브젝트이고,\n화장실에 가고 싶어서 기다리는 대기줄은 Queue 입니다.</p>\n<p>뮤텍스는 <strong>여러 프로세스/스레드를 실행하는 환경에서 자원에 대한 접근에 제한을 강제하기 위한 동기화 매커니즘</strong>이고, 어떠한 오브젝트를 소유한 프로세스/스레드만이 공유자원에 접근할 수 있습니다.</p>\n<br />\n<h3 id=\"-세마포어\" style=\"position:relative;\"><a href=\"#-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\" aria-label=\" 세마포어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔢 세마포어</h3>\n<p>또 다른 식당이 있습니다. 이 식당에는 화장실 2개 있습니다. 화장실 입구에 화장실의 빈칸 개수를 알려주는 전광판(2)이 있습니다.</p>\n<p>A 손님이 화장실에 가고 싶어졌습니다. 전광판을 보고 빈칸이 1개 이상이 있다는 걸 확인했습니다. 전광판의 숫자를 하나 차감(1)하고 화장실로 들어갑니다.</p>\n<p>이어서 B 손님도 화장실로 들어 갔습니다. 전광판의 숫자는 0입니다. C 손님도 화장실에 가고 싶어졌습니다. 그러나 전광판의 숫자가 1이 될때 까지 기다려야 합니다.</p>\n<p>A 손님이 화장실에서 나옵니다. 전광판의 숫자는 1로 바뀌고, 기다리던 C 손님은 화장실로 들어갑니다.</p>\n<p>이것은 세마포어가 동작하는 방식입니다.</p>\n<p>세마포어는 현재 <strong>공유자원에 접근할 수 있는 프로세스/스레드의 수를 나타내는 값을 두어 상호배제를 달성하는 기법</strong>입니다.</p>\n<br />\n<h2 id=\"-예제\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C\" aria-label=\" 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 예제</h2>\n<h3 id=\"세마포어\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\" aria-label=\"세마포어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세마포어</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toilet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> guestId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Toilet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> guestId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>guestId <span class=\"token operator\">=</span> guestId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>semaphore <span class=\"token operator\">=</span> semaphore<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> threadName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Guest went into the toilet :\"</span> <span class=\"token operator\">+</span> threadName <span class=\"token operator\">+</span> <span class=\"token string\">\", for guest id:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>guestId\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 취득</span>\n            <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 해제</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Toilet 클래스는 생성자로 게스트 아이디, 세마포어를 매개변수로 받습니다.\n사용자는 공유자원이 1 이상일 때, 공유자원을 취득할 수 있고 something(?) 무언가를 합니다.\nsomething 메서드는 5초의 대기시간을 주기 때문에, 5초마다 화장실을 이용하는 손님이 바뀔 거라는 것을 예상할 수 있습니다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntStream</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SemaphoreTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">semaphore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> totalToilet <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 화장실(공유자원) 5개</span>\n            <span class=\"token keyword\">int</span> totalThreadPool <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 쓰레드풀 설정</span>\n\n            <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span>totalToilet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true == FIFO</span>\n\n            <span class=\"token class-name\">ExecutorService</span> exeService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span>totalThreadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> exeService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Toilet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> semaphore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            exeService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            exeService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Semaphore 생성자를 이용해 공유자원 개수와 FIFO 설정을 합니다.\nnewFixedThreadPool 로 쓰레드풀을 설정합니다.\nIntStream 으로 100명의 손님을 생성하고, 모두 화장실로 보냅니다.\n화장실은 5개 이고 something 메소드를 수행하는데 5초 시간이 걸리므로,\n5초마다 손님이 화장실에 입장하는 것을 확인할 수 있습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/b9abaab3-1114-45b5-9f5e-2540c6f84f3e/image.gif\" alt=\"\"></p>\n<br />\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<p><a href=\"https://medium.com/@kwoncharles/%EB%AE%A4%ED%85%8D%EC%8A%A4-mutex-%EC%99%80-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4-semaphore-%EC%9D%98-%EC%B0%A8%EC%9D%B4-de6078d3c453\">뮤텍스(Mutex)와 세마포어(Semaphore)의 차이</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=oazGbhBCOfU&#x26;list=PLgXGHBqgT2TvpJ_p9L_yZKPifgdBOzdVH&#x26;index=159\">[10분 테코톡] 🎲 와일더의 Mutex vs Semaphore</a></p>\n<p><a href=\"https://scrutinybykhimaanshu.blogspot.com/2019/08/all-about-java-semaphore.html\">All-about-java-semaphore</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EB%85%90\">📕 개념</a></p>\n<ul>\n<li><a href=\"#-%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9Cdeadlock\">❌ 교착 상태(Deadlock)</a></li>\n<li><a href=\"#mutual-exclusion%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C\">Mutual exclusion(상호 배제)</a></li>\n<li><a href=\"#-%EB%AE%A4%ED%85%8D%EC%8A%A4-mut-ual-ex-clusion\">🔑 뮤텍스 (Mut <del>ual</del> ex <del>clusion</del>)</a></li>\n<li><a href=\"#-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\">🔢 세마포어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%88%EC%A0%9C\">🧑🏻‍💻 예제</a></p>\n<ul>\n<li><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\">세마포어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 17, 2023","title":"뮤텍스(Mutex)와 세마포어(Semaphore)","categories":"블로그 java","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/mutex-semaphore/"}},"prev":{"id":"8de7e380-0b40-51f3-8821-8375fa969e0b","html":"<h2 id=\"-적용-이유\" style=\"position:relative;\"><a href=\"#-%EC%A0%81%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-label=\" 적용 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 적용 이유</h2>\n<h3 id=\"autoscaling-loadbalancer\" style=\"position:relative;\"><a href=\"#autoscaling-loadbalancer\" aria-label=\"autoscaling loadbalancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AutoScaling, LoadBalancer</h3>\n<p>EB를 사용해본 적은 없으나 사용율이 증가하면 scale out 했다가, 다시 줄어들면 scale in 을 할 수 있는 <strong>AutoScaling Group</strong>과 서버의 부하를 나누어 주는 <strong>LoadBalancer</strong>를 간편하게 설정할 수 있는 점이 장점으로 느껴졌습니다.\n다른 여러 장점은 사용해보기 전에는 와닿지 않아서 ‘사용해보고 느껴보자’ 해서 사용했습니다.</p>\n<h2 id=\"️-설정-방법\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"️ 설정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚙️ 설정 방법</h2>\n<h3 id=\"1-iam-역할-추가\" style=\"position:relative;\"><a href=\"#1-iam-%EC%97%AD%ED%95%A0-%EC%B6%94%EA%B0%80\" aria-label=\"1 iam 역할 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. IAM 역할 추가</h3>\n<p>Elastic beanstalk(이하 EB) 의 환경을 구성하기 위해 각 역할에 권한이 필요합니다.</p>\n<h4 id=\"11-서비스-역할\" style=\"position:relative;\"><a href=\"#11-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%97%AD%ED%95%A0\" aria-label=\"11 서비스 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 서비스 역할</h4>\n<p>EB를 서비스로 사용하므로 담당할 IAM 역할을 부여합니다.\n<a href=\"https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/iam-servicerole.html\">Elastic Beanstalk 서비스 역할 관리</a></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/c925b17e-a881-431f-80db-601c7e23e505/image.png\" alt=\"\"></p>\n<p>설정하지 않을 시, 다음과 같은 에러를 만나게 됩니다..</p>\n<blockquote>\n<p>Configuration validation exception: Invalid option specification (Namespace: ‘aws:elasticbeanstalk:managedactions’, OptionName: ‘ManagedActionsEnabled’): You can’t enable managed platform updates when your environment uses the service-linked role ‘AWSServiceRoleForElasticBeanstalk’. Select a service role that has the ‘AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy’ managed policy.</p>\n</blockquote>\n<br />\n<h4 id=\"12-ec2-인스턴스-프로파일\" style=\"position:relative;\"><a href=\"#12-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC\" aria-label=\"12 ec2 인스턴스 프로파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 EC2 인스턴스 프로파일</h4>\n<p>EB 환경 구성이 완료되면 EC2 인스턴스가 자동으로 생성됩니다. 이를 위해 IAM 역할이 필요합니다.\n<a href=\"https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/iam-instanceprofile.html#iam-instanceprofile-create\">Elastic Beanstalk 인스턴스 프로파일 관리</a></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/7dc30e7e-5db3-4df3-a575-0e36ec547a5a/image.png\" alt=\"\"></p>\n<br />\n<h3 id=\"2-환경-구성\" style=\"position:relative;\"><a href=\"#2-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"2 환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 환경 구성</h3>\n<p><a href=\"https://ap-northeast-2.console.aws.amazon.com/elasticbeanstalk/home?region=ap-northeast-2#/create-environment\">Elastic Beanstalk 환경 구성</a></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/df13710c-fdc3-4f10-8406-161353d4d4d4/image.png\" alt=\"\"></p>\n<p>환경 티어: 웹 서버 환경 선택 시 Http 요청을 처리 합니다.<br />\n환경 정보 - 환경 이름: 애플리케이션 이름 + [-env] 형식으로 자동 완성됩니다.<br />\n환경 정보 - 도메인: 작성하지 않을 시 랜덤값으로 자동 생성됩니다.<br /></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/2c5a7da3-e0e0-45c9-980a-bd21e970a317/image.png\" alt=\"\"></p>\n<p>사전 설정: AutoScaling, LoadBalancer를 사용할 예정이라면 고가용성을 선택해 줍니다. 아니면 단일 인스턴스를 선택합니다.</p>\n<p>여기까지 설정하고 검토 단계로 건너뛰면 잠시 뒤 EB 가 생성됩니다.\n생성된 도메인을 클릭하면 화면이 아래처럼 출력됩니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/9244fab9-b269-461b-ad4e-0d9b1b989928/image.png\" alt=\"\"></p>\n<br />\n<h3 id=\"3-배포\" style=\"position:relative;\"><a href=\"#3-%EB%B0%B0%ED%8F%AC\" aria-label=\"3 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 배포</h3>\n<p>도커 허브 레포지토리를 생성하고, 이미지를 추가해줍니다.\ndocker-compose.yml 을 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">\"3\"</span>\n  api:\n    image: tester/jpa-rest:0.0.1-dev\n    restart: always\n    ports:\n      - <span class=\"token string\">\"80:9090\"</span>\n    container_name: jpa-rest-api\n    environment:\n      TZ: Asia/Seoul\n      SPRING_PROFILES_ACTIVE: prod</code></pre></div>\n<br />\n<p>EB 환경 탭에서 업로드 및 배포를 클릭합니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/48fc5a1d-1bff-41b0-b61d-fc5570e97215/image.png\" alt=\"\"></p>\n<p>정상 배포가 된걸 확인할 수 있습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/e8d180c9-1b96-43c7-9e7c-4736a4fbdf2f/image.png\" alt=\"\"></p>\n<br />\n<h3 id=\"4-배포-옵션\" style=\"position:relative;\"><a href=\"#4-%EB%B0%B0%ED%8F%AC-%EC%98%B5%EC%85%98\" aria-label=\"4 배포 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 배포 옵션</h3>\n<p>배포 옵션은 4가지 정도가 존재합니다. Rolling 이 기본값으로 설정되어 있습니다. 저는 기본 설정인 Rolling 방식으로 진행하여 무중단 배포가 가능하도록 설정했습니다. 다운타임이 존재하지 않으면서도 배포시간이 비교적 빨라서 소규모 서비스에서 적합하다고 생각했습니다.</p>\n<h4 id=\"1-all-at-once\" style=\"position:relative;\"><a href=\"#1-all-at-once\" aria-label=\"1 all at once permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. All at once</h4>\n<p>모든 인스턴스에 동시에 새 버전 배포\n단순하고 가장 빠른 배포 방식</p>\n<p>단점: 서비스가 중단되는 다운타임이 존재한다.</p>\n<h4 id=\"2-rolling\" style=\"position:relative;\"><a href=\"#2-rolling\" aria-label=\"2 rolling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Rolling</h4>\n<p>배치 단위로 새 버전 배포 (단일 인스턴스 불가)\n예를 들어, 4개의 인스턴스가 존재한다고 가정합니다.\n2개의 인스턴스를 먼저 배포하고, 배포가 완료되면 나머지 인스턴스도 배포합니다.</p>\n<p>단점: 순차적으로 배포가 되기 때문에, 누군가는 업데이트 전 버전을 누구는 업데이트 후 버전을 볼 수 있습니다.</p>\n<h4 id=\"3-rolling-with-additional-batch\" style=\"position:relative;\"><a href=\"#3-rolling-with-additional-batch\" aria-label=\"3 rolling with additional batch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Rolling with additional batch</h4>\n<p>배치 단위로 새 버전 배포, +1 추가 배치 (단일 인스턴스 불가)\n예를 들어, 4개의 인스턴스가 존재한다고 가정합니다. 배포 시 2개의 인스턴스를 추가합니다. 이후 배치 단위로 배포합니다. 6개중 4개의 인스턴스가 배포 완료되면 2개의 인스턴스는 종료 합니다.</p>\n<h4 id=\"4-immutable\" style=\"position:relative;\"><a href=\"#4-immutable\" aria-label=\"4 immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Immutable</h4>\n<p>새로운 인스턴스 그룹에 배포\nAutoScaling Group을 새로 만들어 배포한다. 새로 생긴 그룹은 기존의 그룹과 같은 DNS 를 바라본다. (Blue green 과 비슷하다)</p>\n<br />\n<h3 id=\"5-autoscaling\" style=\"position:relative;\"><a href=\"#5-autoscaling\" aria-label=\"5 autoscaling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. AutoScaling</h3>\n<p>EB 의 AutoScaling 방법은 두 가지로 나뉩니다.</p>\n<h4 id=\"1-triggers-based-scaling\" style=\"position:relative;\"><a href=\"#1-triggers-based-scaling\" aria-label=\"1 triggers based scaling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Triggers based scaling</h4>\n<p>특정 메트릭의 임계값을 기준으로 스케일링을 한다.</p>\n<h4 id=\"2-time-based-scaling\" style=\"position:relative;\"><a href=\"#2-time-based-scaling\" aria-label=\"2 time based scaling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Time-based scaling</h4>\n<p>특정 시간을 기준으로 스케일링을 한다. (ex. 오전 8시에 대규모 업데이트가 실시 된다.)</p>\n<h4 id=\"설정하기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정하기</h4>\n<p>저는 CPU 사용률을 메트릭으로 하여 60% 이상일 시 스케일업을 하도록 설정했습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/1bc19506-4a0b-4f21-a37d-5762c4f0dd35/image.png\" alt=\"\"><img src=\"https://velog.velcdn.com/images/kws60000/post/0cc4e8da-a01d-40a5-8f5e-f79676ad3c62/image.png\" alt=\"\"></p>\n<p>인스턴스가 2~4개 가 유지되도록 설정했습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/eb217c0d-fb02-4964-a16a-88b2bedc3f18/image.png\" alt=\"\"></p>\n<p>인스턴스가 2개 실행된 것을 확인할 수 있습니다.![]</p>\n<p>(<a href=\"https://velog.velcdn.com/images/kws60000/post/55986749-6484-4039-9afe-a88ee12e7b3d/image.png\">https://velog.velcdn.com/images/kws60000/post/55986749-6484-4039-9afe-a88ee12e7b3d/image.png</a>)</p>\n<br />\n<h2 id=\"-마치며\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\" 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📄 마치며..</h2>\n<h3 id=\"1-초기-설정이-빠르고-간단하다\" style=\"position:relative;\"><a href=\"#1-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EB%8B%A4\" aria-label=\"1 초기 설정이 빠르고 간단하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 초기 설정이 빠르고 간단하다.</h3>\n<p>EC2 를 사용하면 인스턴스 생성, 탄력적 IP 설정, 도커 설치 등 당연히 수행되어야 되는 작업이 있습니다. 어려운 일은 아니지만, EB 가 반복된 작업을 줄여주므로 편리했습니다.</p>\n<h3 id=\"2-autoscaling-설정이-편하다\" style=\"position:relative;\"><a href=\"#2-autoscaling-%EC%84%A4%EC%A0%95%EC%9D%B4-%ED%8E%B8%ED%95%98%EB%8B%A4\" aria-label=\"2 autoscaling 설정이 편하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. AutoScaling 설정이 편하다.</h3>\n<p>AutoScaling 설정이 간단했습니다. 눈에 보이는데로 메트릭을 설정하고, 임계값과 인스턴스 수만 정하면 적용이 가능했습니다.</p>\n<br />\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<p><a href=\"https://www.youtube.com/watch?v=AfRnvsRxZ_0\">AWS Elastic Beanstalk 활용하여 수 분만에 코드 배포하기 - 최원근 솔루션즈 아키텍트(AWS)</a>\n<a href=\"https://llshl.tistory.com/47\">무중단 배포 방식(Rolling / BlueGreen / Canary)</a>\n<a href=\"https://twosky.tistory.com/55\">[AWS] Spring Boot 프로젝트 Elastic beanstalk에 수동 배포하기</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A0%81%EC%9A%A9-%EC%9D%B4%EC%9C%A0\">🤔 적용 이유</a></p>\n<ul>\n<li><a href=\"#autoscaling-loadbalancer\">AutoScaling, LoadBalancer</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\">⚙️ 설정 방법</a></p>\n<ul>\n<li>\n<p><a href=\"#1-iam-%EC%97%AD%ED%95%A0-%EC%B6%94%EA%B0%80\">1. IAM 역할 추가</a></p>\n<ul>\n<li><a href=\"#11-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%97%AD%ED%95%A0\">1.1 서비스 역할</a></li>\n<li><a href=\"#12-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC\">1.2 EC2 인스턴스 프로파일</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">2. 환경 구성</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EB%B0%B0%ED%8F%AC\">3. 배포</a></p>\n</li>\n<li>\n<p><a href=\"#4-%EB%B0%B0%ED%8F%AC-%EC%98%B5%EC%85%98\">4. 배포 옵션</a></p>\n<ul>\n<li><a href=\"#1-all-at-once\">1. All at once</a></li>\n<li><a href=\"#2-rolling\">2. Rolling</a></li>\n<li><a href=\"#3-rolling-with-additional-batch\">3. Rolling with additional batch</a></li>\n<li><a href=\"#4-immutable\">4. Immutable</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-autoscaling\">5. AutoScaling</a></p>\n<ul>\n<li><a href=\"#1-triggers-based-scaling\">1. Triggers based scaling</a></li>\n<li><a href=\"#2-time-based-scaling\">2. Time-based scaling</a></li>\n<li><a href=\"#%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">설정하기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EC%B9%98%EB%A9%B0\">📄 마치며..</a></p>\n<ul>\n<li><a href=\"#1-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95%EC%9D%B4-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%EA%B0%84%EB%8B%A8%ED%95%98%EB%8B%A4\">1. 초기 설정이 빠르고 간단하다.</a></li>\n<li><a href=\"#2-autoscaling-%EC%84%A4%EC%A0%95%EC%9D%B4-%ED%8E%B8%ED%95%98%EB%8B%A4\">2. AutoScaling 설정이 편하다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 19, 2023","title":"Elastic Beanstalk + Docker + Java 설정","categories":"블로그 server","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/java-deploy-with-elastic-beanstalk-and-docker/"}},"site":{"siteMetadata":{"siteUrl":"https://vvs-kim.github.io","comments":{"utterances":{"repo":"vvs-kim/vvs-kim.github.io"}}}}},"pageContext":{"slug":"/could-not-safety-identify-store-assignment-for-repository/","nextSlug":"/mutex-semaphore/","prevSlug":"/java-deploy-with-elastic-beanstalk-and-docker/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}