{"componentChunkName":"component---src-templates-blog-template-js","path":"/select-query-method-join/","result":{"data":{"cur":{"id":"27531f53-e48a-590e-b237-b7cef8b88d47","html":"<h2 id=\"-성능-이슈-발생\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EB%B0%9C%EC%83%9D\" aria-label=\" 성능 이슈 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⏰ 성능 이슈 발생</h2>\n<p>쿼리 메서드를 작성하고 의도한대로 작동했는지 확인하고 있었습니다.\n엔티티에 존재하는 applicant, group, status 필드를 조건으로 하여 데이터를 조회하는 쿼리 메서드입니다.</p>\n<br>\n<h3 id=\"repository\" style=\"position:relative;\"><a href=\"#repository\" aria-label=\"repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repository</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JpaRepository</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SubscriptionRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByApplicantIdAndGroupIdAndStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UUID</span> applicantId<span class=\"token punctuation\">,</span>\n                                                                <span class=\"token class-name\">Long</span> groupId<span class=\"token punctuation\">,</span>\n                                                                <span class=\"token class-name\">SubscriptionStatus</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br>\n<h3 id=\"entity\" style=\"position:relative;\"><a href=\"#entity\" aria-label=\"entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jparest<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Group</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jparest<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subscription</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimeBaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"subscription_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LAZY</span><span class=\"token punctuation\">,</span> optional <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"group_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Group</span> group<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LAZY</span><span class=\"token punctuation\">,</span> optional <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> applicant<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SubscriptionStatus</span> status<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/07a09b7b-8f19-47e2-bd52-56d1306493d1/image.png\" alt=\"\"></p>\n<p>제가 의도한 동작 방식은 조인을 하지 않고 Subscription 엔티티의 필드만으로 데이터를 조회하는 것이었습니다.\nJoin 이 사용된 이유가 궁금했습니다.</p>\n<br />\n<h2 id=\"-성능-이슈-원인\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EC%9B%90%EC%9D%B8\" aria-label=\" 성능 이슈 원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔍 성능 이슈 원인</h2>\n<p>의심이 됐던 원인은\n쿼리 메서드 작성 시, 조건으로 외래키(ApplicantId, GroupId) 값을 사용했고,\n엔티티에는 연관관계의 객체(User, Group)가 있다는 것입니다.</p>\n<p>쿼리 메서드가 외래키를 읽지 못하고 join 이 발생한다?\n이렇게 생각하기에는 이해가 되지 않아서 쿼리메서드의 동작 과정을 찾아봤습니다.</p>\n<br />\n<h3 id=\"쿼리-메서드-동작-과정\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"쿼리 메서드 동작 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리 메서드 동작 과정</h3>\n<h4 id=\"property-travelsal\" style=\"position:relative;\"><a href=\"#property-travelsal\" aria-label=\"property travelsal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property travelsal</h4>\n<blockquote>\n<p>Property expressions can refer only to a direct property of the managed entity, as shown in the preceding example. At query creation time, you already make sure that the parsed property is a property of the managed domain class. However, you can also define constraints by traversing nested properties.</p>\n</blockquote>\n<p><strong>쿼리메서드는 기본적으로 엔티티의 직접적인 속성만 참조할 수 있다고 합니다.</strong>\n그 외에는 사용된 값을 구분하기 위해서 중첩된 속성을 순회하여 제약 조건을 정의한다고 합니다.</p>\n<br />\n<h4 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List&lt;Person> findByAddressZipCode(ZipCode zipCode);</code></pre></div>\n<p>위와 같은 예시에서 다음과 같은 알고리즘으로 동작합니다.</p>\n<ol>\n<li>전체 이름이 엔티티에 존재하는지 찾는다.</li>\n<li>존재하지 않을 경우, 카멜케이스 기준으로 머리와 꼬리로 분할하고 머리를 엔티티에서 찾는다.</li>\n<li>존재하지 않을 경우, 분할 기준을 왼쪽으로 옮긴다.</li>\n<li>머리가 엔티티에 존재하는 필드일 경우, 꼬리가 머리의 속성값이 맞는지 확인한다.</li>\n<li>꼬리의 값이 머리에 존재하지 않는다면, 꼬리를 카멜케이스로 분할하여 동일한 알고리즘을 통해 트리를 계속 구축한다.</li>\n</ol>\n<p>Address.Zip.Code 라는 값을 사용했을 경우의 속성 순환</p>\n<ol>\n<li>Person 엔티티에서 AddressZipCode 찾기</li>\n<li>AddressZip / Code - AddressZip 필드 찾기</li>\n<li>Address / ZipCode - Address 필드 찾기</li>\n<li>Address 에 ZipCode 속성이 있는지 확인하기</li>\n<li>ZipCode -> Zip / Code -> … 위와 같은 알고리즘 반복</li>\n</ol>\n<br />\n<h3 id=\"나의-사용목적과-쿼리-메서드의-동작방식이-다르다\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%AA%A9%EC%A0%81%EA%B3%BC-%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EC%9D%B4-%EB%8B%A4%EB%A5%B4%EB%8B%A4\" aria-label=\"나의 사용목적과 쿼리 메서드의 동작방식이 다르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나의 사용목적과 쿼리 메서드의 동작방식이 다르다</h3>\n<ol>\n<li>\n<p>저의 경우 And 구분자를 사용하였기 때문에\n쿼리메서드는 AppicationId, GroupId, Status 세개의 조건이 엔티티의 필드가 맞는지 확인했을 것입니다.</p>\n</li>\n<li>\n<p>알고리즘을 통해 ApplicantId 과 GroupId 를 각각 Applicant / Id , Group / Id 로 분할합니다.</p>\n</li>\n<li>\n<p>Applicant, Group 에 각각 Id 속성이 존재하는지 찾습니다.\n존재하므로 Applicant.Id , Group.Id 와 일치하는 데이터를 찾습니다.</p>\n</li>\n<li>\n<p>Applicant.Id, Group.Id 는 각각 User, Group 엔티티에 존재하는 기본키 필드입니다.\n쿼리메서드는 다른 엔티티의 기본키를 사용한것을 확인하고, Join 을 사용해 다른 엔티티와 연결된 결과를 출력하려 한 것이라 예상합니다.</p>\n</li>\n</ol>\n<p>저는 <strong>필드의 외래키</strong>를 이용해서 조건에 맞는 결과를 조회하고 싶었습니다.\n그러나 쿼리메서드는 <strong>필드의 직접 속성</strong>을 사용하는 것이 기본 동작방식이고, 그 외에는 속성 순환을 통해 Join 으로 데이터를 조회하기 때문이었습니다.</p>\n<br />\n<h2 id=\"-성능-개선-방법\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%EB%B0%A9%EB%B2%95\" aria-label=\" 성능 개선 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 성능 개선 방법</h2>\n<h3 id=\"1-외래키-대신-연관-관계의-엔티티-사용\" style=\"position:relative;\"><a href=\"#1-%EC%99%B8%EB%9E%98%ED%82%A4-%EB%8C%80%EC%8B%A0-%EC%97%B0%EA%B4%80-%EA%B4%80%EA%B3%84%EC%9D%98-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"1 외래키 대신 연관 관계의 엔티티 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 외래키 대신 연관 관계의 엔티티 사용</h3>\n<p>쿼리 메서드가 원하는 조건 사용 방식은 엔티티의 직접적인 속성 사용입니다.\n즉, 외래키인 id 값으로 조회하지 않고 연관 관계에 있는 엔티티를 매개변수로 사용하면 Join 을 사용하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByApplicantAndGroupAndStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> applicant<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Group</span> group<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SubscriptionStatus</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/7f1e9120-a529-45bc-9c2c-8cf6e35d9083/image.png\" alt=\"\"></p>\n<p>단점은 클라이언트로부터 전달받는 값을 사용해서 조회하는 상황이 있을텐데, id 값으로 엔티티를 조회한 후에 매개변수로 사용해야 한다는 점입니다.\n쿼리가 추가되는 단점이 생깁니다.</p>\n<br />\n<h3 id=\"2-jpql\" style=\"position:relative;\"><a href=\"#2-jpql\" aria-label=\"2 jpql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. JPQL</h3>\n<p>쿼리 메서드 대신에 JPQL 을 사용하면 필드의 id 값 만으로도 Join 을 사용하지 않고 결과를 가져올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT s FROM Subscription s \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"WHERE s.applicant.id = :applicantId AND s.group.id = :groupId AND status = :status\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByApplicantIdAndGroupIdAndStatus</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicantId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">UUID</span> applicantId<span class=\"token punctuation\">,</span>\n                                                                <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"groupId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> groupId<span class=\"token punctuation\">,</span>\n                                                                <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SubscriptionStatus</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/4469a08c-ecf6-4548-a0b7-93cba9806a59/image.png\" alt=\"\"></p>\n<p>Join 을 호출하지 않습니다..⭐️</p>\n<br />\n<h2 id=\"-요약\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%95%BD\" aria-label=\" 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📄 요약</h2>\n<p>쿼리 메서드 사용 시 엔티티에 직접적으로 존재하지 않는 값은 속성 순환을 통해 값을 찾습니다.\n속성 순환을 통해 찾은 값이 다른 테이블의 기본키일 경우, 다른 테이블과 연결된 결과를 원한다고 판단해서 자동으로 Join 을 사용합니다.</p>\n<p>객체의 속성값처럼 <strong>엔티티 내에 직접 존재하지 않는 속성값으로 조회할 때</strong>는\n연관 관계의 엔티티를 매개변수로 사용하거나,\n쿼리메서드 대신 JPQL 을 사용하면 Join 을 사용하지 않을 수 있습니다.</p>\n<br />\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<p><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-property-expressions\">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-property-expressions</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EB%B0%9C%EC%83%9D\">⏰ 성능 이슈 발생</a></p>\n<ul>\n<li><a href=\"#repository\">Repository</a></li>\n<li><a href=\"#entity\">Entity</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EC%9B%90%EC%9D%B8\">🔍 성능 이슈 원인</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\">쿼리 메서드 동작 과정</a></p>\n<ul>\n<li><a href=\"#property-travelsal\">Property travelsal</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%AA%A9%EC%A0%81%EA%B3%BC-%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EC%9D%B4-%EB%8B%A4%EB%A5%B4%EB%8B%A4\">나의 사용목적과 쿼리 메서드의 동작방식이 다르다</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%EB%B0%A9%EB%B2%95\">🔑 성능 개선 방법</a></p>\n<ul>\n<li><a href=\"#1-%EC%99%B8%EB%9E%98%ED%82%A4-%EB%8C%80%EC%8B%A0-%EC%97%B0%EA%B4%80-%EA%B4%80%EA%B3%84%EC%9D%98-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%82%AC%EC%9A%A9\">1. 외래키 대신 연관 관계의 엔티티 사용</a></li>\n<li><a href=\"#2-jpql\">2. JPQL</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9A%94%EC%95%BD\">📄 요약</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></p>\n</li>\n</ul>\n</div>","excerpt":"⏰ 성능 이슈 발생 쿼리 메서드를 작성하고 의도한대로 작동했는지 확인하고 있었습니다.\n엔티티에 존재하는 applicant, group, status 필드를 조건으로 하여 데이터를 조회하는 쿼리 메서드입니다. Repository Entity  제가 의도한 동작 방식은 조인을 하지 않고 Subscription 엔티티의 필드만으로 데이터를 조회하는 것이었습니다.\nJoin 이 사용된 이유가 궁금했습니다. 🔍 성능 이슈 원인 의심이 됐던 원인은\n쿼리 메서드 작성 시, 조건으로 외래키(ApplicantId, GroupId) 값을 사용했고,\n엔티티에는 연관관계의 객체(User, Group)가 있다는 것입니다. 쿼리 메서드가 외래키를 읽지 못하고 join 이 발생한다?\n이렇게 생각하기에는 이해가 되지 않아서 쿼리메서드의 동작 과정을 찾아봤습니다. 쿼리 메서드 동작 과정 Property travelsal Property expressions can refer only to a direct prop…","frontmatter":{"date":"July 03, 2023","title":"조회 쿼리 메서드 사용 시 불필요한 Join 이 사용되는 이유","categories":"블로그 java","author":"devkimc","emoji":"🧬"},"fields":{"slug":"/select-query-method-join/"}},"next":{"id":"8d423b3a-2996-5462-b717-9113b0389e3d","html":"<h2 id=\"-성능-이슈-발생\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EB%B0%9C%EC%83%9D\" aria-label=\" 성능 이슈 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⏰ 성능 이슈 발생</h2>\n<p>서비스 로직을 테스트 하는 중이었습니다.</p>\n<ol>\n<li>클라이언트는 api 호출 시, naver map api 로 부터 조회 받은 식당 ID 값과 서버로 보내준다.</li>\n<li>서버는 식당 ID 값과 추가 정보를 DB 에 저장한다.</li>\n</ol>\n<p>간단한 로직이기에 문제는 없을 거라 생각했습니다. 그런데 식당 정보를 DB 에 저장할 때 select 쿼리가 호출됐습니다..</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/5140e037-56c4-463d-8cc9-7e823f83c78e/image.png\" alt=\"\"></p>\n<p>Insert 쿼리를 호출하기 전에 select 쿼리가 반복적으로 호출된다면, 클라이언트의 api 호출 수만큼 select 쿼리가 호출되는 것입니다. 서버에 불필요한 부하가 추가되는 로직이므로 수정이 필요했습니다.</p>\n<br />\n<h2 id=\"-성능-이슈-원인\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EC%9B%90%EC%9D%B8\" aria-label=\" 성능 이슈 원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔍 성능 이슈 원인</h2>\n<h3 id=\"save\" style=\"position:relative;\"><a href=\"#save\" aria-label=\"save permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>save</h3>\n<p>엔티티를 저장하는 save 메서드는 아래 코드로 구현되어 있습니다.\n저장될 엔티티가 새로운 엔티티인지 확인합니다. 새로운 엔티티면 저장하고, 아니라면 merge 메서드로 업데이트 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// SimpleJpaRepository</span>\n\t<span class=\"token annotation punctuation\">@Transactional</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">S</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S</span> entity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Entity must not be null.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entityInformation<span class=\"token punctuation\">.</span><span class=\"token function\">isNew</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tem<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> entity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<h3 id=\"merge\" style=\"position:relative;\"><a href=\"#merge\" aria-label=\"merge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>merge</h3>\n<p>영속 컨텍스트에서 merge 의 동작방식은</p>\n<ol>\n<li>merge() 실행\n<strong>2. 엔티티의 식별자 값으로 1차 캐시에서 엔티티를 조회한다.</strong>\n<strong>3. 존재하지 않으면 DB에서 조회 하고, 1차 캐시에 저장한다.</strong></li>\n<li>조회한 엔티티의 값을 병합한다. (밀어 넣기, 수정)</li>\n<li>엔티티의 값을 반환한다.</li>\n</ol>\n<p>Insert 전에 select 를 호출한 이유는 merge 메서드를 실행했기 때문입니다. persist 메서드 대신 merge 메서드가 실행 된 이유는 조건문에서 사용된 isNew 메서드의 반환값이 false 이기 때문입니다.</p>\n<br />\n<h3 id=\"isnew\" style=\"position:relative;\"><a href=\"#isnew\" aria-label=\"isnew permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isNew()</h3>\n<p>왜 isNew 메서드가 false 값을 반환했는지 디버깅했습니다.\n<img src=\"https://velog.velcdn.com/images/kws60000/post/5597d0ce-af76-4f3d-a0cb-bbd4ee602117/image.png\" alt=\"\"></p>\n<p>AbstractEntityInformation 추상클래스의 코드입니다.\n엔티티로부터 Id를 가져오고 null 이면 true, 아니면 false 값을 반환하는 로직입니다.\n따라서 <strong>엔티티를 저장할 때 Id 값이 있으면 persist 대신 merge 메서드를 호출한다</strong>는 것을 알게되었습니다.\n기본 키 직접 할당 전략을 사용하면, 엔티티를 저장할 때 Id 값이 필수로 들어가야 하므로 매번 merge 메서드를 호출하는 성능문제가 존재합니다.</p>\n<br />\n<h2 id=\"-성능-개선-방법\" style=\"position:relative;\"><a href=\"#-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%EB%B0%A9%EB%B2%95\" aria-label=\" 성능 개선 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 성능 개선 방법</h2>\n<h3 id=\"isnew-메서드-오버라이딩\" style=\"position:relative;\"><a href=\"#isnew-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"isnew 메서드 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isNew 메서드 오버라이딩</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EntityListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuditingEntityListener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@MappedSuperclass</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeBaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// DB 수정자 추가할지 고려</span>\n    <span class=\"token annotation punctuation\">@CreatedDate</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>updatable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createdAt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@LastModifiedDate</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> updatedAt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>저는 Auditing 기능을 사용하고 있습니다.\nDB에 데이터가 추가될 때, 생성시간 필드가 함께 삽입됩니다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TimeBaseEntity</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Persistable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"rest_id\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCreatedAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Persistable 인터페이스를 사용하면 isNew 메서드를 오버라이딩 할 수 있습니다.\n생성 시간이 null 이 아니라는 것은 데이터가 존재한다는 것과 같습니다.\n이렇게 하면 엔티티의 Id 값이 존재해도 merge 메서드를 호출할 수 있습니다.</p>\n<br />\n<h3 id=\"적용-후\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%ED%9B%84\" aria-label=\"적용 후 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 후</h3>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/c8151752-910d-4dd6-b767-b4311840082b/image.png\" alt=\"\">Insert 전에 select 쿼리를 호출하지 않습니다!</p>\n<br />\n<h2 id=\"-마치며\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\" 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📄 마치며..</h2>\n<p>엔티티 라이프사이클과 Merge 메서드의 로직 순서를 공부할 수 있어서 좋았습니다.\n디버깅 과정에서 spring-data-commons, spring-data-jpa 에 따라 다르게 구현된 코드들을 보며\n어떤 상속 구조를 가졌는지 알게 되었습니다.\n테스트 코드를 통해서 성능을 향상시킬 수 있어서 좋았습니다.</p>\n<br />\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<p><a href=\"https://jaime-note.tistory.com/65\">스프링 데이터 JPA - 새로운 Entity 판별</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EB%B0%9C%EC%83%9D\">⏰ 성능 이슈 발생</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%84%B1%EB%8A%A5-%EC%9D%B4%EC%8A%88-%EC%9B%90%EC%9D%B8\">🔍 성능 이슈 원인</a></p>\n<ul>\n<li><a href=\"#save\">save</a></li>\n<li><a href=\"#merge\">merge</a></li>\n<li><a href=\"#isnew\">isNew()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%EB%B0%A9%EB%B2%95\">🔑 성능 개선 방법</a></p>\n<ul>\n<li><a href=\"#isnew-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\">isNew 메서드 오버라이딩</a></li>\n<li><a href=\"#%EC%A0%81%EC%9A%A9-%ED%9B%84\">적용 후</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EC%B9%98%EB%A9%B0\">📄 마치며..</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 21, 2023","title":"엔티티 저장 시 Select 쿼리를 호출 하는 이유","categories":"블로그 java","author":"devkimc","emoji":"🧬"},"fields":{"slug":"/jpa-insert-before-select/"}},"prev":{"id":"bac7d3e3-965d-59f0-bddc-9caf969b548c","html":"<h2 id=\"nosql-이란\" style=\"position:relative;\"><a href=\"#nosql-%EC%9D%B4%EB%9E%80\" aria-label=\"nosql 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL 이란</h2>\n<p>비관계형 데이터베이스 유형을 가리킵니다. NoSQL 데이터베이스는 언어마다 관습화된 API, 선언적 구조와 쿼리 언어, 쿼리별 언어를 사용하여 질의할 수 있습니다. 이러한 이유로 not only SQL 데이터베이스라고 불립니다.</p>\n<br />\n<h2 id=\"nosql의-등장배경\" style=\"position:relative;\"><a href=\"#nosql%EC%9D%98-%EB%93%B1%EC%9E%A5%EB%B0%B0%EA%B2%BD\" aria-label=\"nosql의 등장배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL의 등장배경</h2>\n<h3 id=\"스토리지-비용-감소\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EB%B9%84%EC%9A%A9-%EA%B0%90%EC%86%8C\" aria-label=\"스토리지 비용 감소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토리지 비용 감소</h3>\n<p>2000년대 말에 스토리지 비용이 크게 하락하면서 등장했습니다. 단순히 <strong>데이터 중복 감소를 목적으로 복잡하고 관리하기 어려운 데이터 모델을 생성해야 하던 트렌드가 바뀐 것</strong>입니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/dc1f3c7b-3d87-410a-a807-fc091141f8ad/image.png\" alt=\"\"></p>\n<h3 id=\"비정형-데이터\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%A0%95%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"비정형 데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비정형 데이터</h3>\n<p>인터넷이 활성화되고, SNS 등이 등장하면서 저장해야 하는 데이터의 양이 증가했습니다. 이러한 <strong>데이터는 정형, 반정형 등 모양과 크기가 모두 다르기 때문에 미리 스키마를 정의하는 것이 거의 불가능</strong>해졌습니다. 개발자가 엄청난 양의 비정형 데이터를 저장할 수 있도록 지원하기 위해 등장했습니다.</p>\n<h3 id=\"유연한-개발-방식\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%ED%95%9C-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EC%8B%9D\" aria-label=\"유연한 개발 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연한 개발 방식</h3>\n<p>애자일 방법론의 인기가 높아지면서 소프트웨어 개발자들은 소프트웨어 개발 방식을 재고하기 시작했습니다. 그리고 <strong>변화하는 요구사항에 발 빠르게 적응해야 할 필요가 있음을 인식</strong>했습니다. 데이터베이스 모델에 이르기까지 소프트웨어 스택 전반에서 반복 작업과 변경을 신속하게 수행할 수 있는 능력이 필요했고, 개발자들에게 이러한 유연성을 제공하기 위해 등장했습니다.</p>\n<h3 id=\"분산-시스템\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"분산 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분산 시스템</h3>\n<p>클라우드 컴퓨팅의 인기가 높아졌고, 개발자들은 퍼블릭 클라우드를 사용해 애플리케이션과 데이터를 호스팅하기 시작했습니다. 이들은 <strong>여러 서버와 리전에 데이터를 분산시켜 애플리케이션 복원력을 높이고, 스케일이 아닌 스케일아웃</strong>을 수행하기를 원했습니다. 이러한 분산 시스템을 지원하기 위해 등장했습니다.</p>\n<br />\n<h2 id=\"nosql의-종류\" style=\"position:relative;\"><a href=\"#nosql%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"nosql의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL의 종류</h2>\n<h3 id=\"document-db\" style=\"position:relative;\"><a href=\"#document-db\" aria-label=\"document db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Document DB</h3>\n<p><strong>JSON, BSON, XML 과 같이 문서 형식</strong>으로 저장할 수 있는 DB 입니다.</p>\n<h4 id=\"document\" style=\"position:relative;\"><a href=\"#document\" aria-label=\"document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Document</h4>\n<p>문서는 문서 데이터베이스의 레코드입니다. 문서는 필드-값 쌍으로 저장합니다. 값은 문자열, 숫자, 배열 또는 객체를 포함하여 다양한 유형 및 구조일 수 있습니다.</p>\n<h4 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tom@example.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"cell\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"765-555-5555\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"likes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fashion\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"shopping\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"businesses\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Entertainment 1080\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"partner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jean\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bankrupt\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date_founded\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"$date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-05-19T04:00:00Z\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Swag for Tweens\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date_founded\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"$date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-11-01T04:00:00Z\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 동일한 정보를 관계형 테이터베이스에 저장할 경우 세개의 테이블(Info, Likes, Businesses)이 필요합니다. 그리고 id 를 외래키로 사용하여 ORM, Join 등을 사용해야 합니다.</p>\n<p><strong>ORM, Join, 외래키 등을 사용할 필요없이</strong> 쉽고 직관적이며 스키마를 동적으로 변경할 수 있습니다.</p>\n<br>\n<h3 id=\"key-value-db\" style=\"position:relative;\"><a href=\"#key-value-db\" aria-label=\"key value db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key-value DB</h3>\n<p><strong>데이터가 key-value 형식</strong>으로 저장되고, 해당 데이터를 읽고 쓰는데 최적화된 DB 입니다.</p>\n<h4 id=\"장점-1\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<p>효율적이고 간결한 데이터 구조를 정의하여 key-value 가져오기/업데이트/제거의 간단한 형식으로 데이터에 접근할 수 있습니다. 키를 통해 값을 빠르게 검색할 수 있습니다.</p>\n<br>\n<h3 id=\"column-store-db\" style=\"position:relative;\"><a href=\"#column-store-db\" aria-label=\"column store db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Column Store DB</h3>\n<p>열 지향 모델을 사용하여 데이터를 저장하는 DB 입니다. 관<strong>계형 데이터베이스의 스키마와 비슷한 Keyspace 라는 개념을 사용</strong>합니다. 키스페이스에는 열을 포함하는 행들을 포함하는 Column Family 가 포함됩니다.\n<br></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/1393fd5a-dee7-412d-baae-e93451dcd055/image.png\" alt=\"\"></p>\n<p>Column Family 의 예시입니다. 여러 행으로 구성됩니다.\n<br></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/7fefc509-ff64-4918-8ac0-8016b72407c2/image.png\" alt=\"\"></p>\n<p>Row 는 고유키와 각 열에 대한 정보로 구성됩니다.\n<br></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/f897a7d6-88d9-46a9-9f61-eb5eb1416adc/image.png\" alt=\"\"></p>\n<h4 id=\"장점-2\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-2\" aria-label=\"장점 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<p>열 형식의 구조로 인해 SUM, COUNT, AVG 등을 잘 수행합니다. 효율적인 압축의 이점을 통해 더 빠르게 읽을 수 있습니다.</p>\n<br>\n<h3 id=\"graph-db\" style=\"position:relative;\"><a href=\"#graph-db\" aria-label=\"graph db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Graph DB</h3>\n<p><strong>데이터 요소 간의 관계에 중점을 두는 DB</strong> 입니다. 데이터 요소는 노드, 엣지, 속성을 저장됩니다. 어느 객체, 장소 또는 사람 모두 노드가 될 수 있습니다. 엣지는 노드 간의 관계를 정의합니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/5157be09-6420-4b49-b42e-8c7953a7cce0/image.png\" alt=\"\"></p>\n<h4 id=\"장점-3\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-3\" aria-label=\"장점 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<h5 id=\"대규모의-연관-데이터-조회-서능\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%9D%98-%EC%97%B0%EA%B4%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C-%EC%84%9C%EB%8A%A5\" aria-label=\"대규모의 연관 데이터 조회 서능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대규모의 연관 데이터 조회 서능</h5>\n<p>관계형 데이터베이스를 사용하는 대규모 응용프로그램의 경우 20, 30 개 이상의 테이블에 조인을 하는 쿼리가 있다고 합니다. 레코드가 많을 수록 실행 시간은 오래걸릴 것입니다. 이런 상황에서 그래프 DB를 사용할 경우 훨씬 간단하고 빠르게 실행이 됩니다.</p>\n<p>이유는 그래프 DB 에서 쿼리가 그래프의 일부로 지역화되기 때문입니다. 즉, 각 <strong>쿼리의 실행 시간은 전체 그래프의 크기가 아니라 해당 쿼리를 충족하기 위해 통과한 그래프 부분의 크기에만 비례</strong>합니다.</p>\n<h5 id=\"유연성\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\" aria-label=\"유연성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유연성</h5>\n<p>설정된 스키마를 정의할 필요가 없기 때문에 데이터베이스가 확장되는 방식에 대해 완전한 유연성을 가질 수 있습니다.</p>\n<br />\n<h2 id=\"rdbms-vs-nosql\" style=\"position:relative;\"><a href=\"#rdbms-vs-nosql\" aria-label=\"rdbms vs nosql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDBMS vs NoSQL</h2>\n<h3 id=\"rdbms\" style=\"position:relative;\"><a href=\"#rdbms\" aria-label=\"rdbms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDBMS</h3>\n<h4 id=\"장점-4\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-4\" aria-label=\"장점 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul>\n<li>정해진 스키마에 따라 데이터를 저장해야 하므로 명확한 데이터 구조를 보장합니다.</li>\n<li>각 데이터는 중복없이 한 번만 저장할 수 있습니다.</li>\n<li>복잡한 트랜잭션을 지원합니다.</li>\n</ul>\n<h4 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul>\n<li>테이블 간의 관계를 맺고 있어서 시스템의 규모가 커질 경우 JOIN 문이 많은 복잡한 쿼리가 생성되며, 검색 시간도 오래걸립니다.</li>\n<li>스키마로 인해 데이터가 유연하지 못합니다. 변경 될 경우 번거롭고 어렵습니다.</li>\n<li>성능 향상을 위해 Scale-up 만 지원합니다. 이로 인해 비용이 크게 증가할 수 있습니다.</li>\n</ul>\n<h4 id=\"사용처\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%B2%98\" aria-label=\"사용처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용처</h4>\n<ul>\n<li>변경될 여지가 없고, 명확한 스키마가 사용자와 데이터에게 중요한 경우</li>\n</ul>\n<br />\n<h3 id=\"nosql\" style=\"position:relative;\"><a href=\"#nosql\" aria-label=\"nosql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQL</h3>\n<h4 id=\"장점-5\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-5\" aria-label=\"장점 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<ul>\n<li>복잡도가 떨어져서 훨씬 대용량의 데이터를 저장 및 관리할 수 있습니다.</li>\n<li>스키마가 존재하지 않아서 정형, 비정형 및 반정형 데이터를 관리할 수 있습니다.</li>\n<li>또한, 데이터가 자유로운 구조를 가지므로 언제든 저장된 데이터를 조정하고 새로운 필드를 추가할 수 있습니다.</li>\n<li>데이터 분산이 용이하며 성능 향상을 위한 Scale-out 이 가능합니다.</li>\n</ul>\n<h4 id=\"단점-1\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h4>\n<ul>\n<li>데이터 중복이 발생할 수 있으며 중복된 데이터가 변경 될 경우 수정을 모든 컬렉션에서 수행해야 합니다.</li>\n<li>간단한 트랜잭션만 지원합니다.</li>\n</ul>\n<h4 id=\"사용처-1\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%B2%98-1\" aria-label=\"사용처 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용처</h4>\n<ul>\n<li>읽기는 자주 하지만 데이터 변경은 자주 없는 경우</li>\n<li>정확한 데이터 구조를 알 수 없거나, 변경/확장될 수 있는 경우</li>\n<li>데이터베이스를 수평적으로 확장해야 하는 경우</li>\n<li>막대한 양의 데이터를 다루는 경우</li>\n</ul>\n<br />\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<p><a href=\"https://www.mongodb.com/ko-kr/nosql-explained\">NoSQL이란 무엇입니까?</a><br>\n<a href=\"https://www.oracle.com/kr/database/nosql/what-is-nosql/\">NoSQL이란 무엇인가?</a><br>\n<a href=\"https://www.ibm.com/kr-ko/topics/nosql-databases\">NoSQL 데이터베이스란?</a></p>\n<p><a href=\"https://www.mongodb.com/ko-kr/scale/types-of-nosql-databases\">Understanding the Different Types of NoSQL Databases</a><br>\n<a href=\"https://database.guide/what-is-a-column-store-database/\">What is a Column Store Database?</a><br>\n<a href=\"https://database.guide/what-is-a-graph-database\">What is a Graph Database?</a></p>\n<p><a href=\"https://khj93.tistory.com/entry/Database-RDBMS%EC%99%80-NOSQL-%EC%B0%A8%EC%9D%B4%EC%A0%90\">Database-RDBMS와-NOSQL-차이점</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#nosql-%EC%9D%B4%EB%9E%80\">NoSQL 이란</a></p>\n</li>\n<li>\n<p><a href=\"#nosql%EC%9D%98-%EB%93%B1%EC%9E%A5%EB%B0%B0%EA%B2%BD\">NoSQL의 등장배경</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EB%B9%84%EC%9A%A9-%EA%B0%90%EC%86%8C\">스토리지 비용 감소</a></li>\n<li><a href=\"#%EB%B9%84%EC%A0%95%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0\">비정형 데이터</a></li>\n<li><a href=\"#%EC%9C%A0%EC%97%B0%ED%95%9C-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EC%8B%9D\">유연한 개발 방식</a></li>\n<li><a href=\"#%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C\">분산 시스템</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#nosql%EC%9D%98-%EC%A2%85%EB%A5%98\">NoSQL의 종류</a></p>\n<ul>\n<li>\n<p><a href=\"#document-db\">Document DB</a></p>\n<ul>\n<li><a href=\"#document\">Document</a></li>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#key-value-db\">Key-value DB</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-1\">장점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#column-store-db\">Column Store DB</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-2\">장점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#graph-db\">Graph DB</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90-3\">장점</a></p>\n<ul>\n<li><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8%EC%9D%98-%EC%97%B0%EA%B4%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C-%EC%84%9C%EB%8A%A5\">대규모의 연관 데이터 조회 서능</a></li>\n<li><a href=\"#%EC%9C%A0%EC%97%B0%EC%84%B1\">유연성</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#rdbms-vs-nosql\">RDBMS vs NoSQL</a></p>\n<ul>\n<li>\n<p><a href=\"#rdbms\">RDBMS</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-4\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EC%B2%98\">사용처</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#nosql\">NoSQL</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-5\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90-1\">단점</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EC%B2%98-1\">사용처</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 20, 2023","title":"NoSQL","categories":"블로그 db","author":"devkimc","emoji":"🧬"},"fields":{"slug":"/no-sql/"}},"site":{"siteMetadata":{"siteUrl":"https://devkimc.github.io","comments":{"utterances":{"repo":"devkimc/devkimc.github.io"}}}}},"pageContext":{"slug":"/select-query-method-join/","nextSlug":"/jpa-insert-before-select/","prevSlug":"/no-sql/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}