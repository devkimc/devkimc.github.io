{"componentChunkName":"component---src-templates-blog-template-js","path":"/spring-rest-docs/","result":{"data":{"cur":{"id":"fca4a166-672d-5911-9730-c3b3d9c94fa6","html":"<h2 id=\"-적용-이유\" style=\"position:relative;\"><a href=\"#-%EC%A0%81%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-label=\" 적용 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 적용 이유</h2>\n<p>프론트엔드 개발자는 백엔드 개발자가 작성한 api 문서를 보고 api 를 매핑합니다.\n문서를 작성하는 것은 노동력이 들어가는 것이고, 사람이 작성하기 때문에 변경된 사항을 업데이트를 하지 않는 경우도 존재합니다.\nspring-rest-docs 는 테스트 코드를 작성해야 하고, 빌드 시 api 문서가 자동으로 생성됩니다.</p>\n<p><strong>테스트 코드를 작성하면서 검증된 api 문서를 자동으로 생성할 수 있다!</strong></p>\n<h3 id=\"vs-swagger\" style=\"position:relative;\"><a href=\"#vs-swagger\" aria-label=\"vs swagger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>vs Swagger</h3>\n<p>Swagger 도 문서화를 위해 많이 사용된다고 했습니다.\n보다 UI 가 깔끔해보이는 장점이 있었습니다. spring-rest-docs 와 달리 테스트 코드가 의무가 아니므로 빠른 시간 내의 문서를 작성할 때 용이할 거라 생각이 듭니다.\n단점으로는 컨트롤러 코드 주위에 문서를 위한 코드를 작성해야 된다는 점입니다.\n가독성이 중요하다고 판단되어 spring-rest-docs 를 사용하기로 결정했습니다.</p>\n<br />\n<h2 id=\"️-적용-하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A0%81%EC%9A%A9-%ED%95%98%EA%B8%B0\" aria-label=\"️ 적용 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚙️ 적용 하기</h2>\n<h3 id=\"1-buildgradle\" style=\"position:relative;\"><a href=\"#1-buildgradle\" aria-label=\"1 buildgradle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. build.gradle</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\nplugins <span class=\"token punctuation\">{</span>\n\tid <span class=\"token string\">\"org.asciidoctor.jvm.convert\"</span> version <span class=\"token string\">\"3.3.2\"</span>\n<span class=\"token punctuation\">}</span>\n\next <span class=\"token punctuation\">{</span>\n\tsnippetsDir <span class=\"token operator\">=</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>'build<span class=\"token operator\">/</span>generated<span class=\"token operator\">-</span>snippets'<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -- 1 --</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n\ttestImplementation 'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>restdocs<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>restdocs<span class=\"token operator\">-</span>mockmvc'\n<span class=\"token punctuation\">}</span>\n\ntest <span class=\"token punctuation\">{</span>\n\toutputs<span class=\"token punctuation\">.</span>dir snippetsDir\n<span class=\"token punctuation\">}</span>\n\nasciidoctor <span class=\"token punctuation\">{</span>\n\tdependsOn test\n\tinputs<span class=\"token punctuation\">.</span>dir snippetsDir\n<span class=\"token punctuation\">}</span>\n\nasciidoctor<span class=\"token punctuation\">.</span>doFirst <span class=\"token punctuation\">{</span>\n\tdelete <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>'src<span class=\"token operator\">/</span>main<span class=\"token operator\">/</span>resources<span class=\"token operator\">/</span><span class=\"token keyword\">static</span><span class=\"token operator\">/</span>docs'<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -- 2 --</span>\n<span class=\"token punctuation\">}</span>\n\ntask <span class=\"token function\">copyDocument</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token class-name\">Copy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdependsOn asciidoctor\n\tfrom <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"build/docs/asciidoc\"</span><span class=\"token punctuation\">)</span>\n\tinto <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/main/resources/static/docs\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -- 3 --</span>\n<span class=\"token punctuation\">}</span>\n\nbuild <span class=\"token punctuation\">{</span>\n\tdependsOn copyDocument\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>build 시 자동생성될 snippet 의 저장 경로 (ex. request-body)</li>\n<li>asciidoctor 가 실행되면 우선적으로 저장된 문서를 삭제한다. (초기화)</li>\n<li>asciidoctor 실행 시 생성되는 index.html 을 정적 경로로 이동</li>\n</ol>\n<br />\n<h3 id=\"2-mockmvc--restdocs-설정\" style=\"position:relative;\"><a href=\"#2-mockmvc--restdocs-%EC%84%A4%EC%A0%95\" aria-label=\"2 mockmvc  restdocs 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. MockMvc &#x26; restdocs 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestDocumentationExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringContainerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@BeforeEach</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationContext</span> webApplicationContext<span class=\"token punctuation\">,</span>\n                      <span class=\"token class-name\">RestDocumentationContextProvider</span> restDocumentationContextProvider<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mockMvc <span class=\"token operator\">=</span> <span class=\"token class-name\">MockMvcBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">webAppContextSetup</span><span class=\"token punctuation\">(</span>webApplicationContext<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token function\">documentationConfiguration</span><span class=\"token punctuation\">(</span>restDocumentationContextProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존 컨트롤러 테스트에서 추가된 부분은 apply(documentationConfiguration(restDocumentationContextProvider)) 입니다.</p>\n<p><strong>RestDocumentationContextProvider</strong>: RestDocumentationContext 에 대한 액세스 접근을 제공하는 인터페이스\n<strong>RestDocumentationContext</strong>: RESTful API의 문서화가 수행되는 컨텍스트 인터페이스</p>\n<br />\n<h3 id=\"3-컨트롤러-테스트-작성\" style=\"position:relative;\"><a href=\"#3-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"3 컨트롤러 테스트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 컨트롤러 테스트 작성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GroupControllerTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringContainerTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그룹 리스트 조회\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getGroupList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/groups\"</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">andDo</span><span class=\"token punctuation\">(</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get-groups\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">PayloadDocumentation</span><span class=\"token punctuation\">.</span><span class=\"token function\">responseFields</span><span class=\"token punctuation\">(</span>\n                                <span class=\"token class-name\">PayloadDocumentation</span><span class=\"token punctuation\">.</span><span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"성공 여부\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token class-name\">PayloadDocumentation</span><span class=\"token punctuation\">.</span><span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.[].groupId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그룹 아이디\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token class-name\">PayloadDocumentation</span><span class=\"token punctuation\">.</span><span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.[].groupName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그룹 이름\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token class-name\">PayloadDocumentation</span><span class=\"token punctuation\">.</span><span class=\"token function\">fieldWithPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.[].totalUsers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"그룹 인원수\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>상속받은 MockMvc 를 사용하여 작성했습니다.\n요청 파라미터 및 데이터가 없기 때문에 응답 필드값과 설명값을 추가했습니다.</p>\n<br />\n<h3 id=\"4-문서-스니펫-생성-확인\" style=\"position:relative;\"><a href=\"#4-%EB%AC%B8%EC%84%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB-%EC%83%9D%EC%84%B1-%ED%99%95%EC%9D%B8\" aria-label=\"4 문서 스니펫 생성 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 문서 스니펫 생성 확인</h3>\n<p>작성한 테스트를 실행합니다. 테스트가 성공적으로 끝났다면, build 폴더가 생길 것입니다.\n요청 필드 값은 입력하지 않았으므로 request-fileds 를 제외한 나머지 스니펫이 생성됐습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">my@notebook build % tree\n<span class=\"token builtin class-name\">.</span>\n└── generated-snippets\n    └── get-groups\n        ├── curl-request.adoc\n        ├── http-request.adoc\n        ├── http-response.adoc\n        ├── httpie-request.adoc\n        ├── request-body.adoc\n        ├── response-body.adoc\n        └── response-fields.adoc\n\n<span class=\"token number\">3</span> directories, <span class=\"token number\">7</span> files</code></pre></div>\n<br />\n<h3 id=\"5-indexadoc-파일-작성\" style=\"position:relative;\"><a href=\"#5-indexadoc-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\" aria-label=\"5 indexadoc 파일 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. index.adoc 파일 작성</h3>\n<p>src/docs/asciidoc/index.adoc 파일을 생성합니다.\n문서에 넣고 싶은 스니펫을 작성합니다.\nasciidoc 가 adoc 파일을 스타일링 해서 html 파일로 변환시켜줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ifndef::snippets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n:snippets: ./build/generated-snippets\nendif::<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">=</span> API Docs\n:doctype: book\n:icons: font\n:source-highlighter: highlightjs\n:toc: left\n:toclevels: <span class=\"token number\">1</span>\n:toc-title: 그룹\n\n<span class=\"token operator\">==</span> 그룹 리스트 조회\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> REQUEST\n\ninclude::<span class=\"token punctuation\">{</span>snippets<span class=\"token punctuation\">}</span>/get-groups/http-request.adoc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> REQEUST FIELD\n\n// include::<span class=\"token punctuation\">{</span>snippets<span class=\"token punctuation\">}</span>/get-groups/request-fields.adoc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>F\n\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> RESPONSE\n\ninclude::<span class=\"token punctuation\">{</span>snippets<span class=\"token punctuation\">}</span>/get-groups/http-response.adoc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> RESPONSE FIELD\n\ninclude::<span class=\"token punctuation\">{</span>snippets<span class=\"token punctuation\">}</span>/get-groups/response-fields.adoc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br />\n<h3 id=\"6-build-및-문서-확인\" style=\"position:relative;\"><a href=\"#6-build-%EB%B0%8F-%EB%AC%B8%EC%84%9C-%ED%99%95%EC%9D%B8\" aria-label=\"6 build 및 문서 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. build 및 문서 확인</h3>\n<p>문서 저장경로인 src/main/resources/static/docs 에 index.html 이 존재하는지 확인합니다.\n<a href=\"http://localhost:8080/docs/index.html\">http://localhost:8080/docs/index.html</a> 로 이동하면..!\n<img src=\"https://velog.velcdn.com/images/kws60000/post/5a1135e2-2ced-4690-a02c-fc469d6e2c3a/image.png\" alt=\"\"></p>\n<p>만약 스니펫의 정보가 잘 나오지 않는다면 index.adoc 파일에서 작성한 스니펫 경로가 올바른지 확인해야 합니다.</p>\n<br />\n<h2 id=\"-마치며\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\" 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📄 마치며..</h2>\n<p>초기 설정만 하면 이후 문서화를 하는 것은 (테스트 코드를 작성한다는 전제) 어렵지 않아 보입니다. <strong>협업하는 개발자에게 검증된 api를 제공한다는 것만으로도 충분히 가치가 있다고 생각합니다.</strong> 기존에 사용하던 노션에 비해서 가독성이 떨어지는 단점은 있었습니다. 다른 사용자들은 swagger ui 를 연동해서 이를 보완한다고 해서 이후에 적용하려 합니다.</p>\n<br />\n<h3 id=\"참고-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참고 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 사이트</h3>\n<p><a href=\"https://velog.io/@bagt/API-%EB%AC%B8%EC%84%9C%ED%99%94%EC%99%80-Spring-Rest-Docs\">https://velog.io/@bagt/API-%EB%AC%B8%EC%84%9C%ED%99%94%EC%99%80-Spring-Rest-Docs</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A0%81%EC%9A%A9-%EC%9D%B4%EC%9C%A0\">🤔 적용 이유</a></p>\n<ul>\n<li><a href=\"#vs-swagger\">vs Swagger</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%A0%81%EC%9A%A9-%ED%95%98%EA%B8%B0\">⚙️ 적용 하기</a></p>\n<ul>\n<li><a href=\"#1-buildgradle\">1. build.gradle</a></li>\n<li><a href=\"#2-mockmvc--restdocs-%EC%84%A4%EC%A0%95\">2. MockMvc &#x26; restdocs 설정</a></li>\n<li><a href=\"#3-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1\">3. 컨트롤러 테스트 작성</a></li>\n<li><a href=\"#4-%EB%AC%B8%EC%84%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB-%EC%83%9D%EC%84%B1-%ED%99%95%EC%9D%B8\">4. 문서 스니펫 생성 확인</a></li>\n<li><a href=\"#5-indexadoc-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\">5. index.adoc 파일 작성</a></li>\n<li><a href=\"#6-build-%EB%B0%8F-%EB%AC%B8%EC%84%9C-%ED%99%95%EC%9D%B8\">6. build 및 문서 확인</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EC%B9%98%EB%A9%B0\">📄 마치며..</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\">참고 사이트</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"🤔 적용 이유 프론트엔드 개발자는 백엔드 개발자가 작성한 api 문서를 보고 api 를 매핑합니다.\n문서를 작성하는 것은 노동력이 들어가는 것이고, 사람이 작성하기 때문에 변경된 사항을 업데이트를 하지 않는 경우도 존재합니다.\nspring-rest-docs 는 테스트 코드를 작성해야 하고, 빌드 시 api 문서가 자동으로 생성됩니다. 테스트 코드를 작성하면서 검증된 api 문서를 자동으로 생성할 수 있다! vs Swagger Swagger 도 문서화를 위해 많이 사용된다고 했습니다.\n보다 UI 가 깔끔해보이는 장점이 있었습니다. spring-rest-docs 와 달리 테스트 코드가 의무가 아니므로 빠른 시간 내의 문서를 작성할 때 용이할 거라 생각이 듭니다.\n단점으로는 컨트롤러 코드 주위에 문서를 위한 코드를 작성해야 된다는 점입니다.\n가독성이 중요하다고 판단되어 spring-rest-docs 를 사용하기로 결정했습니다. ⚙️ 적용 하기 1. build.gradle build 시 자…","frontmatter":{"date":"June 01, 2023","title":"Spring rest docs 설정","categories":"블로그 spring","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/spring-rest-docs/"}},"next":{"id":"401ba422-fe49-5e29-8d81-298d309dd731","html":"<h2 id=\"-에러-상황\" style=\"position:relative;\"><a href=\"#-%EC%97%90%EB%9F%AC-%EC%83%81%ED%99%A9\" aria-label=\" 에러 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚫 에러 상황</h2>\n<p>builder 패턴을 사용하여 유저 인스턴스를 생성했고, userGroups 필드(List)에 데이터를 추가하자 NullPointException 이 발생했다.</p>\n<blockquote>\n<p>java.lang.NullPointerException: Cannot invoke “java.util.List.add(Object)” because the return value of “user.domain.User.getUserGroups()” is null</p>\n</blockquote>\n<br/>\n<h3 id=\"user-엔티티\" style=\"position:relative;\"><a href=\"#user-%EC%97%94%ED%8B%B0%ED%8B%B0\" aria-label=\"user 엔티티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User 엔티티</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Builder</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGroup</span><span class=\"token punctuation\">></span></span> userGroups <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGroup</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"recvUser\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invite</span><span class=\"token punctuation\">></span></span> invites <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Invite</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"user-생성---builder-사용\" style=\"position:relative;\"><a href=\"#user-%EC%83%9D%EC%84%B1---builder-%EC%82%AC%EC%9A%A9\" aria-label=\"user 생성   builder 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User 생성 - builder 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocialJoinRequest</span> socialJoinRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">socialUserId</span><span class=\"token punctuation\">(</span>socialJoinRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getSocialUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span>socialJoinRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">nickname</span><span class=\"token punctuation\">(</span>socialJoinRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getNickname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">loginType</span><span class=\"token punctuation\">(</span>socialJoinRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">userType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ROLE_GENERAL</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h2 id=\"-에러-원인\" style=\"position:relative;\"><a href=\"#-%EC%97%90%EB%9F%AC-%EC%9B%90%EC%9D%B8\" aria-label=\" 에러 원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📜 에러 원인</h2>\n<p>null 인 리스트에 데이터를 추가할 수 없다는 것이다.\n엔티티에서 리스트 필드를 초기화 했음에도 불구하고 null 인 상황인다..</p>\n<p>의심가는 건 builder 메서드를 사용 시 List 의 값은 입력하지 않았다.\n알아보니 builder 패턴은 엔티티에서 초기화한 값을 무시하고 초기화를 한다.</p>\n<p>따라서 builder 패턴 사용 시, 생성된 유저의 List 필드는 아래와 같았을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGroup</span><span class=\"token punctuation\">></span></span> userGroups<span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<h2 id=\"-해결-방법\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\" 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 해결 방법</h2>\n<h3 id=\"1-기본-생성자-사용\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%82%AC%EC%9A%A9\" aria-label=\"1 기본 생성자 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 기본 생성자 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>socialJoinRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getSocialUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>socialJoinRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본 생성자 사용시, 엔티티에서 초기화한 값으로 인스턴스를 생성하므로 List 는 null 이 아니다.</p>\n<br />\n<h3 id=\"2-builder-메서드-사용-시-list-필드-초기화\" style=\"position:relative;\"><a href=\"#2-builder-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9A%A9-%EC%8B%9C-list-%ED%95%84%EB%93%9C-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"2 builder 메서드 사용 시 list 필드 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. builder 메서드 사용 시, List 필드 초기화</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocialJoinRequest</span> socialJoinRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">userGroups</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGroup</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>builder 메서드를 사용할 때마다 list 를 초기화 시켜줘야 하는 단점이 있다.</p>\n<br />\n<h3 id=\"3-builderdefault-어노테이션-사용\" style=\"position:relative;\"><a href=\"#3-builderdefault-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%82%AC%EC%9A%A9\" aria-label=\"3 builderdefault 어노테이션 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Builder.Default 어노테이션 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Builder.Default</span>\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGroup</span><span class=\"token punctuation\">></span></span> userGroups <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserGroup</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>builder 패턴으로 인스턴스 생성시, 지정한 값으로 초기화 시켜주는 방법이다.</p>\n<br />\n<h2 id=\"참고-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참고 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 사이트</h2>\n<p><a href=\"https://bbeomgeun.tistory.com/174\">https://bbeomgeun.tistory.com/174</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%97%90%EB%9F%AC-%EC%83%81%ED%99%A9\">🚫 에러 상황</a></p>\n<ul>\n<li><a href=\"#user-%EC%97%94%ED%8B%B0%ED%8B%B0\">User 엔티티</a></li>\n<li><a href=\"#user-%EC%83%9D%EC%84%B1---builder-%EC%82%AC%EC%9A%A9\">User 생성 - builder 사용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%97%90%EB%9F%AC-%EC%9B%90%EC%9D%B8\">📜 에러 원인</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">🔑 해결 방법</a></p>\n<ul>\n<li><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%82%AC%EC%9A%A9\">1. 기본 생성자 사용</a></li>\n<li><a href=\"#2-builder-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%82%AC%EC%9A%A9-%EC%8B%9C-list-%ED%95%84%EB%93%9C-%EC%B4%88%EA%B8%B0%ED%99%94\">2. builder 메서드 사용 시, List 필드 초기화</a></li>\n<li><a href=\"#3-builderdefault-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%82%AC%EC%9A%A9\">3. Builder.Default 어노테이션 사용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%82%AC%EC%9D%B4%ED%8A%B8\">참고 사이트</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 23, 2023","title":"Builder 어노테이션 사용시, List 추가에 대한 NullPointerException","categories":"블로그 spring","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/builder-annotation-nullpointerexception/"}},"prev":{"id":"611398ab-c106-5ee5-8ae1-f0b337ba3884","html":"<h2 id=\"-개념\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%85%90\" aria-label=\" 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📕 개념</h2>\n<h3 id=\"-교착-상태deadlock\" style=\"position:relative;\"><a href=\"#-%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9Cdeadlock\" aria-label=\" 교착 상태deadlock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 교착 상태(Deadlock)</h3>\n<p>노트북으로 코딩을 하고 싶은 두 사람 A, B(프로세스/스레드) 가 있다.\nA는 배터리가 0% 인 노트북(자원)을 가지고 있고(점유) 충전기 를 기다리고 있다(대기).\nB는 충전기(자원)를 가지고 있고(점유) 노트북을 기다리고 있다(대기).</p>\n<p>이처럼 <strong>서로 자원을 놓아줄 생각은 없고, 자원 요청을 무한정 대기하고 있는 상태</strong> 를 말합니다.</p>\n<blockquote>\n<h3 id=\"critical-section임계-영역\" style=\"position:relative;\"><a href=\"#critical-section%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD\" aria-label=\"critical section임계 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Critical section(임계 영역)</h3>\n<p>여기서 노트북과 충전기를 공유 자원이라고 부르고, <strong>공유자원이 속해 있어 교착 상태가 발생할 수 있는 영역</strong>을 임계영역이라고 부릅니다.\n공유 데이터의 일관성을 보장하기 위해 하나의 프로세스/스레드만 진입해서 실행(상호배제)가능한 영역입니다.</p>\n</blockquote>\n<p>교착 상태가 발생하기 위해서는 네가지 조건을 충족해야 합니다. 이중 상호배제를 중점으로 알아보려 합니다.</p>\n<ol>\n<li>상호배제</li>\n<li>점유대기</li>\n<li>비선점</li>\n<li>순환대기</li>\n</ol>\n<br />\n<h3 id=\"mutual-exclusion상호-배제\" style=\"position:relative;\"><a href=\"#mutual-exclusion%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C\" aria-label=\"mutual exclusion상호 배제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutual exclusion(상호 배제)</h3>\n<p>프로세스/스레드가 필요로 하는 공유자원에 대해 배타적인 통제권을 요구하는 것을 말합니다.\n다시 말하면, 하나의 프로세스/스레드가 공유자원을 사용할 때 다른 프로세스가 공유자원에 접근할 수 없도록 통제하는 것을 말합니다.</p>\n<br />\n<h3 id=\"-뮤텍스-mut-ual-ex-clusion\" style=\"position:relative;\"><a href=\"#-%EB%AE%A4%ED%85%8D%EC%8A%A4-mut-ual-ex-clusion\" aria-label=\" 뮤텍스 mut ual ex clusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔑 뮤텍스 (Mut <del>ual</del> ex <del>clusion</del>)</h3>\n<p>화장실(공유자원)이 하나뿐인 식당이 있습니다. 식당에는 A, B, C 라는 손님(프로세스/스레드)이 식사 중입니다.\n화장실을 가기 위해서는 카운터 옆에 걸린 열쇠가 있어야 합니다.</p>\n<p>A 손님이 열쇠를 들고 화장실에 먼저 들어갔습니다. 잠시 뒤 B 손님이 화장실에 가고 싶어졌습니다. 그러나 카운터에 열쇠가 없기 때문에 카운터 앞에서 기다려야 합니다.</p>\n<p>C 손님도 화장실에 가고 싶어졌고, B 손님 뒤에서 대기 해야 합니다.</p>\n<p>A 손님이 화장실에서 나와 열쇠를 반납했습니다. 기다리던 손님들 중 맨 앞에 기다리던 B 손님이 열쇠를 갖을 수 있고, 화장실에 갈 수 있습니다.</p>\n<p>이것이 뮤텍스가 동작하는 방식입니다.</p>\n<p>화장실 열쇠는 공유자원에 접근하기 위한 어떠한 오브젝트이고,\n화장실에 가고 싶어서 기다리는 대기줄은 Queue 입니다.</p>\n<p>뮤텍스는 <strong>여러 프로세스/스레드를 실행하는 환경에서 자원에 대한 접근에 제한을 강제하기 위한 동기화 매커니즘</strong>이고, 어떠한 오브젝트를 소유한 프로세스/스레드만이 공유자원에 접근할 수 있습니다.</p>\n<br />\n<h3 id=\"-세마포어\" style=\"position:relative;\"><a href=\"#-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\" aria-label=\" 세마포어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔢 세마포어</h3>\n<p>또 다른 식당이 있습니다. 이 식당에는 화장실 2개 있습니다. 화장실 입구에 화장실의 빈칸 개수를 알려주는 전광판(2)이 있습니다.</p>\n<p>A 손님이 화장실에 가고 싶어졌습니다. 전광판을 보고 빈칸이 1개 이상이 있다는 걸 확인했습니다. 전광판의 숫자를 하나 차감(1)하고 화장실로 들어갑니다.</p>\n<p>이어서 B 손님도 화장실로 들어 갔습니다. 전광판의 숫자는 0입니다. C 손님도 화장실에 가고 싶어졌습니다. 그러나 전광판의 숫자가 1이 될때 까지 기다려야 합니다.</p>\n<p>A 손님이 화장실에서 나옵니다. 전광판의 숫자는 1로 바뀌고, 기다리던 C 손님은 화장실로 들어갑니다.</p>\n<p>이것은 세마포어가 동작하는 방식입니다.</p>\n<p>세마포어는 현재 <strong>공유자원에 접근할 수 있는 프로세스/스레드의 수를 나타내는 값을 두어 상호배제를 달성하는 기법</strong>입니다.</p>\n<br />\n<h2 id=\"-예제\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C\" aria-label=\" 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 예제</h2>\n<h3 id=\"세마포어\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\" aria-label=\"세마포어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세마포어</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toilet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> guestId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Toilet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> guestId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>guestId <span class=\"token operator\">=</span> guestId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>semaphore <span class=\"token operator\">=</span> semaphore<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> threadName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Guest went into the toilet :\"</span> <span class=\"token operator\">+</span> threadName <span class=\"token operator\">+</span> <span class=\"token string\">\", for guest id:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>guestId\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 취득</span>\n            <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 해제</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Toilet 클래스는 생성자로 게스트 아이디, 세마포어를 매개변수로 받습니다.\n사용자는 공유자원이 1 이상일 때, 공유자원을 취득할 수 있고 something(?) 무언가를 합니다.\nsomething 메서드는 5초의 대기시간을 주기 때문에, 5초마다 화장실을 이용하는 손님이 바뀔 거라는 것을 예상할 수 있습니다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntStream</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SemaphoreTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">semaphore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> totalToilet <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 화장실(공유자원) 5개</span>\n            <span class=\"token keyword\">int</span> totalThreadPool <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 쓰레드풀 설정</span>\n\n            <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span>totalToilet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true == FIFO</span>\n\n            <span class=\"token class-name\">ExecutorService</span> exeService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span>totalThreadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> exeService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Toilet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> semaphore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            exeService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            exeService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Semaphore 생성자를 이용해 공유자원 개수와 FIFO 설정을 합니다.\nnewFixedThreadPool 로 쓰레드풀을 설정합니다.\nIntStream 으로 100명의 손님을 생성하고, 모두 화장실로 보냅니다.\n화장실은 5개 이고 something 메소드를 수행하는데 5초 시간이 걸리므로,\n5초마다 손님이 화장실에 입장하는 것을 확인할 수 있습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/b9abaab3-1114-45b5-9f5e-2540c6f84f3e/image.gif\" alt=\"\"></p>\n<br />\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<p><a href=\"https://medium.com/@kwoncharles/%EB%AE%A4%ED%85%8D%EC%8A%A4-mutex-%EC%99%80-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4-semaphore-%EC%9D%98-%EC%B0%A8%EC%9D%B4-de6078d3c453\">뮤텍스(Mutex)와 세마포어(Semaphore)의 차이</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=oazGbhBCOfU&#x26;list=PLgXGHBqgT2TvpJ_p9L_yZKPifgdBOzdVH&#x26;index=159\">[10분 테코톡] 🎲 와일더의 Mutex vs Semaphore</a></p>\n<p><a href=\"https://scrutinybykhimaanshu.blogspot.com/2019/08/all-about-java-semaphore.html\">All-about-java-semaphore</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9C%EB%85%90\">📕 개념</a></p>\n<ul>\n<li><a href=\"#-%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9Cdeadlock\">❌ 교착 상태(Deadlock)</a></li>\n<li><a href=\"#mutual-exclusion%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C\">Mutual exclusion(상호 배제)</a></li>\n<li><a href=\"#-%EB%AE%A4%ED%85%8D%EC%8A%A4-mut-ual-ex-clusion\">🔑 뮤텍스 (Mut <del>ual</del> ex <del>clusion</del>)</a></li>\n<li><a href=\"#-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\">🔢 세마포어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%88%EC%A0%9C\">🧑🏻‍💻 예제</a></p>\n<ul>\n<li><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\">세마포어</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 17, 2023","title":"뮤텍스(Mutex)와 세마포어(Semaphore)","categories":"블로그 java","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/mutex-semaphore/"}},"site":{"siteMetadata":{"siteUrl":"https://vvs-kim.github.io","comments":{"utterances":{"repo":"vvs-kim/vvs-kim.github.io"}}}}},"pageContext":{"slug":"/spring-rest-docs/","nextSlug":"/builder-annotation-nullpointerexception/","prevSlug":"/mutex-semaphore/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}