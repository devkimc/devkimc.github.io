{"componentChunkName":"component---src-templates-blog-template-js","path":"/www-google-com-search/","result":{"data":{"cur":{"id":"54df58f3-e6a7-5e77-9cee-003d9cdd6c62","html":"<h2 id=\"wwwgooglecom을-검색-시-화면이-출력되는-과정\" style=\"position:relative;\"><a href=\"#wwwgooglecom%EC%9D%84-%EA%B2%80%EC%83%89-%EC%8B%9C-%ED%99%94%EB%A9%B4%EC%9D%B4-%EC%B6%9C%EB%A0%A5%EB%90%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"wwwgooglecom을 검색 시 화면이 출력되는 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://www.google.com%EC%9D%84\">www.google.com을</a> 검색 시 화면이 출력되는 과정</h2>\n<ol>\n<li>사용자가 주소창에 구글 주소를 입력한다. (<a href=\"https://www.google.com\">https://www.google.com</a>)</li>\n<li>DNS에서 도메인 주소에 해당하는 IP 주소를 찾는다.</li>\n<li>브라우저가 서버와 TCP connection을 한다.</li>\n<li>브라우저가 서버에 HTTP 요청을 한다.</li>\n<li>서버가 HTTP 응답을 보낸다.</li>\n<li>html 파일과 CSS 파일을 각각 파싱 하여 DOM, CSSOM Tree를 만든다. (Parsing)</li>\n<li>DOM Tree 와 CSSOM Tree를 결합하여 Render Tree를 만든다.</li>\n<li>Render Tree에서 각 노드의 위치와 크기를 계산한다. (Layout)</li>\n<li>Layout 단계에서 계산된 값을 여러 Layer로 나눠 픽셀을 채워 넣는다. (Painting)</li>\n<li>여러 Layer로 나누어진 픽셀들을 우리가 보는 화면처럼 합성해 준다. (Composite)</li>\n</ol>\n<p>1<del>5 번은 통신과 관련된 과정이고,\n6</del>11 번은 화면이 어떻게 그려지는지(렌더링)에 대한 과정입니다.</p>\n<p>본 게시물에서는 <strong>브라우저 렌더링</strong>을 중점으로 화면이 어떻게 출력되는지 작성하려 했습니다.</p>\n<p>​</p>\n<h2 id=\"브라우저-렌더링-과정\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\" aria-label=\"브라우저 렌더링 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 렌더링 과정</h2>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/ffc7bffb-315f-4140-8075-2f5087ca7ae4/image.png\" alt=\"\"></p>\n<p>​</p>\n<h3 id=\"1-dom-cssom-트리-생성\" style=\"position:relative;\"><a href=\"#1-dom-cssom-%ED%8A%B8%EB%A6%AC-%EC%83%9D%EC%84%B1\" aria-label=\"1 dom cssom 트리 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DOM, CSSOM 트리 생성</h3>\n<p>Ⅰ. 변환: 브라우저가 HTML의 원시 바이트를 읽어와서, HTML에 정의된 인코딩에 따라 개별 문자로 변환함\nⅡ. 토큰화: 브라우저가 문자열을 W3C 표준에 지정된 고유 토큰으로 변환함\nⅢ. 렉싱: 방출된 토큰은 해당 속성 및 규칙을 정의하는 ‘객체’로 변환함\nⅣ. DOM 생성: HTML 마크업에 정의된 여러 태그 간의 관계(parent, child)를 해석해서 트리 구조로 연결됨</p>\n<ul>\n<li>DOM 트리를 생성하는 과정과 동일한 과정으로 CSSOM 트리를 생성함</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/786d859b-fc2e-4843-aa06-b592594654a1/image.png\" alt=\"\"></p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/781a2f4d-e28d-42f7-9f65-f1ef6990be7d/image.png\" alt=\"\"></p>\n<p>​</p>\n<h3 id=\"2-렌더-트리render-tree-생성\" style=\"position:relative;\"><a href=\"#2-%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%ACrender-tree-%EC%83%9D%EC%84%B1\" aria-label=\"2 렌더 트리render tree 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 렌더 트리(Render Tree) 생성</h3>\n<p>DOM 트리와 CSSOM 트리를 결합해서 렌더 트리를 생성합니다.\n렌더 트리에는 페이지를 렌더링 하는데 필요한 노드만 포함됩니다.\n<img src=\"https://velog.velcdn.com/images/kws60000/post/fc056cc1-d751-497d-9d89-59fcf55fe7ea/image.png\" alt=\"\"></p>\n<p>​</p>\n<h3 id=\"3-레이아웃layout\" style=\"position:relative;\"><a href=\"#3-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83layout\" aria-label=\"3 레이아웃layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 레이아웃(Layout)</h3>\n<p>렌더 트리가 제자리에 있으면 레이아웃 단계를 진행할 수 있습니다.\n레이아웃 단계에서는 <strong>viewport</strong> 내에서 정확한 위치와 크기를 계산합니다.</p>\n<ul>\n<li>viewport: 화면 Display 상의 표시 영역(ex. 노트북 너비: 1440px, iPhone SE 너비: 375px )</li>\n</ul>\n<p>​</p>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/f0d2989a-d915-4005-8d86-17610b37f2e6/image.png\" alt=\"\"></p>\n<p>​</p>\n<h3 id=\"4-페인팅painting\" style=\"position:relative;\"><a href=\"#4-%ED%8E%98%EC%9D%B8%ED%8C%85painting\" aria-label=\"4 페인팅painting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 페인팅(Painting)</h3>\n<p>레이아웃 단계에서 계산된 각 노드들의 위치, 크기, 색상에 맞춰 화면에 요소를 그립니다.\n단, 전체 Render Tree를 한 번에 처리하는 것이 아니라\n특수한 알고리즘에 따라 Layer를 나눠서 처리합니다.\n<img src=\"https://velog.velcdn.com/images/kws60000/post/8359a7d2-1d96-4380-90ff-908268eb20be/image.avif\" alt=\"\">\n이렇게 Layer를 분리함으로써 특정 요소가 수정되어 리페인트(Repaint) 해야 할 때,\n변경된 Layer만 다시 그려주면 되는 이점이 있습니다.</p>\n<p>​</p>\n<h3 id=\"5-composite\" style=\"position:relative;\"><a href=\"#5-composite\" aria-label=\"5 composite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Composite</h3>\n<p>이렇게 여러 Layer로 나눠진 픽셀들을 우리가 실제로 보는 화면처럼 합성해 주는 단계입니다.\n이러한 과정을 통해 우리는 <a href=\"http://www.google.com\">www.google.com</a> 주소를 입력 시 완성된 화면을 볼 수 있습니다.</p>\n<p>​</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>개발할 때 크게 중요시하지 않았던 내용이고, 너무 생소해서 자료를 베끼기에 급급했습니다.\n이번 기회로 조금은 공부는 했지만, 실제로 어떻게 작동하는지는 실제로 확인해야겠다고 생각했습니다.\n또한, 브라우저 렌더링 성능 최적화에 대한 궁금증이 생겼습니다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#wwwgooglecom%EC%9D%84-%EA%B2%80%EC%83%89-%EC%8B%9C-%ED%99%94%EB%A9%B4%EC%9D%B4-%EC%B6%9C%EB%A0%A5%EB%90%98%EB%8A%94-%EA%B3%BC%EC%A0%95\">www.google.com을 검색 시 화면이 출력되는 과정</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\">브라우저 렌더링 과정</a></p>\n<ul>\n<li><a href=\"#1-dom-cssom-%ED%8A%B8%EB%A6%AC-%EC%83%9D%EC%84%B1\">1. DOM, CSSOM 트리 생성</a></li>\n<li><a href=\"#2-%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%ACrender-tree-%EC%83%9D%EC%84%B1\">2. 렌더 트리(Render Tree) 생성</a></li>\n<li><a href=\"#3-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83layout\">3. 레이아웃(Layout)</a></li>\n<li><a href=\"#4-%ED%8E%98%EC%9D%B8%ED%8C%85painting\">4. 페인팅(Painting)</a></li>\n<li><a href=\"#5-composite\">5. Composite</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n</li>\n</ul>\n</div>","excerpt":"www.google.com을 검색 시 화면이 출력되는 과정 사용자가 주소창에 구글 주소를 입력한다. (https://www.google.com) DNS에서 도메인 주소에 해당하는 IP 주소를 찾는다. 브라우저가 서버와 TCP connection을 한다. 브라우저가 서버에 HTTP 요청을 한다. 서버가 HTTP 응답을 보낸다. html 파일과 CSS 파일을 각각 파싱 하여 DOM, CSSOM Tree를 만든다. (Parsing) DOM Tree 와 CSSOM Tree를 결합하여 Render Tree를 만든다. Render Tree에서 각 노드의 위치와 크기를 계산한다. (Layout) Layout 단계에서 계산된 값을 여러 Layer로 나눠 픽셀을 채워 넣는다. (Painting) 여러 Layer로 나누어진 픽셀들을 우리가 보는 화면처럼 합성해 준다. (Composite) 15 번은 통신과 관련된 과정이고,\n611 번은 화면이 어떻게 그려지는지(렌더링)에 대한 과정입니다. 본 게시물…","frontmatter":{"date":"August 04, 2022","title":"www.google.com을 검색 시 발생하는 일 - [ 브라우저 렌더링 ]","categories":"블로그 web","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/www-google-com-search/"}},"next":{"id":"e1f09876-14d1-5947-bf9d-7380f8a0f0cf","html":"<p><img src=\"https://velog.velcdn.com/images/kws60000/post/f460a774-e0fa-493d-8654-7f762abcb847/image.png\" alt=\"\"></p>\n<h2 id=\"에러-배경\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\" aria-label=\"에러 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 배경</h2>\n<ol>\n<li>\n<p>node js 를 AWS 서버 에 배포했다.</p>\n</li>\n<li>\n<p>웹 화면에서 api 요청 시 ‘사이트에 연결할 수 없음’ 에러 확인</p>\n</li>\n</ol>\n<p>​</p>\n<h2 id=\"에러-발생-이유\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\" aria-label=\"에러 발생 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 발생 이유</h2>\n<ul>\n<li>\n<p>방화벽이 원인이었다.</p>\n</li>\n<li>\n<p>http 프로토콜과 포트를 열어주지 않아서 응답을 주지 않았다.</p>\n</li>\n</ul>\n<p>​</p>\n<h2 id=\"에러-해결-과정\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\" aria-label=\"에러 해결 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 해결 과정</h2>\n<h3 id=\"1-aws-인바운드-규칙-확인\" style=\"position:relative;\"><a href=\"#1-aws-%EC%9D%B8%EB%B0%94%EC%9A%B4%EB%93%9C-%EA%B7%9C%EC%B9%99-%ED%99%95%EC%9D%B8\" aria-label=\"1 aws 인바운드 규칙 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS 인바운드 규칙 확인</h3>\n<ul>\n<li>Instance 의 보안 그룹에 대한 포트를 열어줬는지 확인한다.</li>\n</ul>\n<p>​</p>\n<h3 id=\"2-해당-포트가-실행되는-지-확인\" style=\"position:relative;\"><a href=\"#2-%ED%95%B4%EB%8B%B9-%ED%8F%AC%ED%8A%B8%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94-%EC%A7%80-%ED%99%95%EC%9D%B8\" aria-label=\"2 해당 포트가 실행되는 지 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 해당 포트가 실행되는 지 확인</h3>\n<ul>\n<li>\n<p>netstat -tnlp</p>\n</li>\n<li>\n<p>해당 포트가 실행되는 지 알 수 있다.</p>\n</li>\n</ul>\n<p>​</p>\n<h3 id=\"3-방화벽-허용하기\" style=\"position:relative;\"><a href=\"#3-%EB%B0%A9%ED%99%94%EB%B2%BD-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 방화벽 허용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 방화벽 허용하기</h3>\n<ul>\n<li>\n<p>firewall-cmd —permanent —add-service=http</p>\n</li>\n<li>\n<p>firewall-cmd —permanent —add-service=https</p>\n</li>\n<li>\n<p>firewall-cmd —permanent —add-port=9000/tcp</p>\n</li>\n</ul>\n<p>​</p>\n<ul>\n<li>\n<p>과거에 허용한 적이 없다면 success</p>\n</li>\n<li>\n<p>과거에 허용한 적이 있다면 경고가 뜬다.</p>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\">에러 배경</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\">에러 발생 이유</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\">에러 해결 과정</a></p>\n<ul>\n<li><a href=\"#1-aws-%EC%9D%B8%EB%B0%94%EC%9A%B4%EB%93%9C-%EA%B7%9C%EC%B9%99-%ED%99%95%EC%9D%B8\">1. AWS 인바운드 규칙 확인</a></li>\n<li><a href=\"#2-%ED%95%B4%EB%8B%B9-%ED%8F%AC%ED%8A%B8%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94-%EC%A7%80-%ED%99%95%EC%9D%B8\">2. 해당 포트가 실행되는 지 확인</a></li>\n<li><a href=\"#3-%EB%B0%A9%ED%99%94%EB%B2%BD-%ED%97%88%EC%9A%A9%ED%95%98%EA%B8%B0\">3. 방화벽 허용하기</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 04, 2022","title":"AWS EC2 Node.js 서버 연결 안될 때 ( 사이트에 연결할 수 없음 )","categories":"블로그 server","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/err-connection-refused/"}},"prev":{"id":"66ae95ed-8773-50ec-a40b-2729a1e722fe","html":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Access to XMLHttpRequest at <span class=\"token string\">'local address'</span> from origin <span class=\"token string\">'api address'</span> has been blocked by <span class=\"token constant\">CORS</span> <span class=\"token literal-property property\">policy</span><span class=\"token operator\">:</span>\nNo <span class=\"token string\">'Access-Control-Allow-Origin'</span> header is present on the requested resource<span class=\"token punctuation\">.</span></code></pre></div>\n<p>​</p>\n<h2 id=\"에러-배경\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\" aria-label=\"에러 배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 배경</h2>\n<ol>\n<li>\n<p>vue 에서 kakao map api 를 사용하여 지도에서 맛집(장소)을 검색했다.</p>\n</li>\n<li>\n<p>주소 이외의 장소에 대한 상세정보가 필요했다.</p>\n</li>\n<li>\n<p>카카오 플레이스 (map.place.kakao) 로 장소에 대한 정보를 조회 요청했다.</p>\n</li>\n<li>\n<p>Cors Error 발생\n​</p>\n</li>\n</ol>\n<h2 id=\"에러-발생-이유\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\" aria-label=\"에러 발생 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 발생 이유</h2>\n<ul>\n<li>로컬 주소(localhost:8000) 와 조회하려는 주소(map.place.kakao:443) 의 출처가 다르다.</li>\n</ul>\n<p>​</p>\n<h2 id=\"cors-error-cross-origin-resource-sharing\" style=\"position:relative;\"><a href=\"#cors-error-cross-origin-resource-sharing\" aria-label=\"cors error cross origin resource sharing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS Error (Cross-Origin Resource Sharing)</h2>\n<p>간단히 말해서,</p>\n<p>브라우저에서 요청하는 주소와 응답하는 주소(출처)가 다를 때</p>\n<p>허락한 요청 외에는 에러를 발생시키겠다.</p>\n<p>​</p>\n<p>ex) 둘을 비교하면 프로토콜(http) 와 호스트(loaclhost), 포트(8000) 모두 다르다. 에러 발생</p>\n<p>요청하는 주소: http :// localhost : 8000</p>\n<p>응답하는 주소: https :// map.place.kakao : 443\n​</p>\n<h3 id=\"허락한-요청이란\" style=\"position:relative;\"><a href=\"#%ED%97%88%EB%9D%BD%ED%95%9C-%EC%9A%94%EC%B2%AD%EC%9D%B4%EB%9E%80\" aria-label=\"허락한 요청이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>허락한 요청이란?</h3>\n<p>출처가 다르더라도 요청을 허락하도록 응답 헤더에 설정한 요청을 말한다.</p>\n<p>ex) Access-Control-Allow-Origin : *</p>\n<p>ex) Access-Control-Allow-Credentials : true</p>\n<p>​</p>\n<h2 id=\"에러-해결-과정-방법-1\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-1\" aria-label=\"에러 해결 과정 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 해결 과정 (방법 1)</h2>\n<h3 id=\"1-프록시-서버를-사용해서-우회하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%9A%B0%ED%9A%8C%ED%95%98%EA%B8%B0\" aria-label=\"1 프록시 서버를 사용해서 우회하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프록시 서버를 사용해서 우회하기</h3>\n<ul>\n<li>\n<p><a href=\"https://cors-anywhere.herokuapp.com\">https://cors-anywhere.herokuapp.com</a></p>\n</li>\n<li>\n<p>해당 프록시 서버에서 헤더 설정을 해준다. ( Access-Control-Allow-Origin : * )​</p>\n</li>\n<li>\n<p>프론트에서 카카오 API를 요청하고 싶을 때 할 수 있는 유일한 방법이었다.</p>\n</li>\n<li>\n<p>해당 프록시 서버가 중단될 경우 원하는 응답을 받을 수 없고, 코드가 깔끔하지 못한 단점이 있다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">getData</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://cors-anywhere.herokuapp.com/https://place.map.kakao.com:443/main/v/9209726'</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>baseUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>​</p>\n<h2 id=\"에러-해결-과정-방법-2\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-2\" aria-label=\"에러 해결 과정 방법 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 해결 과정 (방법 2)</h2>\n<h3 id=\"1-프록시-서버-구축하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\" aria-label=\"1 프록시 서버 구축하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프록시 서버 구축하기</h3>\n<ul>\n<li>\n<p>해당 방법은 프론트에서 외부 API 를 요청하는 방법이 아니다.</p>\n</li>\n<li>\n<p>요청 순서: vue -> express -> kakao api</p>\n</li>\n<li>\n<p>express 서버에서 요청할 경우 에러를 발생시키지 않는다.</p>\n</li>\n<li>\n<p>참고했던 설명이다.</p>\n</li>\n</ul>\n<blockquote>\n<p>CORS 는 브라우저에 관련된 정책이기 때문에,\n<strong>브라우저를 통하지 않고 서버 간 통신을 할 때는 이 정책이 적용되지 않는다.</strong>\n즉, 서버에서 서버로 리소스를 요청하면 CORS 정책을 위반하지 않고 정상적으로 응답을 받을 수 있다.</p>\n</blockquote>\n<ul>\n<li>출처: <a href=\"https://xiubindev.tistory.com/115\">https://xiubindev.tistory.com/115</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ﻿express 서버에서 카카오 API 요청 코드</span>\n\n<span class=\"token keyword\">const</span> kakaoPlaceUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://place.map.kakao.com:443/main/v/'</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/place/info'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> kakaoPlaceIdUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>kakaoPlaceUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token constant\">PLACE_ID</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>kakaoPlaceIdUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>isExist <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">30001</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"장소에 대한 정보가 조회되었습니다.\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-vuejs-코드-수정\" style=\"position:relative;\"><a href=\"#2-vuejs-%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95\" aria-label=\"2 vuejs 코드 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. vue.js 코드 수정</h3>\n<ul>\n<li>express 서버에서 카카오 API 를 요청하기 때문에 vue 에서는 파라미터만 전달하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ﻿express 서버에 요청하는 함수</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getKakaoPlaceInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">axiosPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/kakao/place/info'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PLACE_ID</span><span class=\"token operator\">:</span> placeId<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ﻿express 서버에 요청하는 함수를 실행하는 부분</span>\n\n    <span class=\"token function\">getPlaceDetail</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">place<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getKakaoPlaceInfo</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">showToast</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warning'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">30001</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resSearchDetail<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calcRating</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">showToast</span><span class=\"token punctuation\">(</span><span class=\"token string\">'danger'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-vuejs-실행-후-카카오-api-요청\" style=\"position:relative;\"><a href=\"#3-vuejs-%EC%8B%A4%ED%96%89-%ED%9B%84-%EC%B9%B4%EC%B9%B4%EC%98%A4-api-%EC%9A%94%EC%B2%AD\" aria-label=\"3 vuejs 실행 후 카카오 api 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. vue.js 실행 후 카카오 API 요청</h3>\n<ul>\n<li>해당 장소에 대한 상세정보를 응답받는다.</li>\n<li>ex) 리뷰 / 후기</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/kws60000/post/ed5d4824-eb93-4219-bd24-cffcd6370a2e/image.png\" alt=\"\"></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%B0%EA%B2%BD\">에러 배경</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9D%B4%EC%9C%A0\">에러 발생 이유</a></p>\n</li>\n<li>\n<p><a href=\"#cors-error-cross-origin-resource-sharing\">CORS Error (Cross-Origin Resource Sharing)</a></p>\n<ul>\n<li><a href=\"#%ED%97%88%EB%9D%BD%ED%95%9C-%EC%9A%94%EC%B2%AD%EC%9D%B4%EB%9E%80\">허락한 요청이란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-1\">에러 해결 과정 (방법 1)</a></p>\n<ul>\n<li><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%9A%B0%ED%9A%8C%ED%95%98%EA%B8%B0\">1. 프록시 서버를 사용해서 우회하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95-%EB%B0%A9%EB%B2%95-2\">에러 해결 과정 (방법 2)</a></p>\n<ul>\n<li><a href=\"#1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\">1. 프록시 서버 구축하기</a></li>\n<li><a href=\"#2-vuejs-%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95\">2. vue.js 코드 수정</a></li>\n<li><a href=\"#3-vuejs-%EC%8B%A4%ED%96%89-%ED%9B%84-%EC%B9%B4%EC%B9%B4%EC%98%A4-api-%EC%9A%94%EC%B2%AD\">3. vue.js 실행 후 카카오 API 요청</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 04, 2022","title":"CORS Error [ vue 에서 외부 API 요청 시 ]","categories":"블로그 web","author":"vvs-kim","emoji":"💻"},"fields":{"slug":"/vue-cors-error/"}},"site":{"siteMetadata":{"siteUrl":"https://vvs-kim.github.io","comments":{"utterances":{"repo":"vvs-kim/vvs-kim.github.io"}}}}},"pageContext":{"slug":"/www-google-com-search/","nextSlug":"/err-connection-refused/","prevSlug":"/vue-cors-error/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}